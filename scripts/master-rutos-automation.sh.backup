#!/bin/sh
# Script: master-rutos-automation.sh
# Version: 1.0.0
# Description: Master script for automated RUTOS compatibility fixes with GitHub integration

set -e

# Version information
SCRIPT_VERSION="1.0.0"

# Standard colors for consistent output (compatible with busybox)
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[1;35m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Check if we're in a terminal that supports colors
if [ -t 1 ] && [ "${TERM:-}" != "dumb" ] && [ "${NO_COLOR:-}" != "1" ]; then
    # Colors enabled (keep current values)
    :
else
    # Colors disabled
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    PURPLE=""
    CYAN=""
    NC=""
fi

# Standard logging functions
log_info() {
    printf "%s[INFO]%s [%s] %s\n" "$GREEN" "$NC" "$(date '+%Y-%m-%d %H:%M:%S')" "$1"
}

log_warning() {
    printf "%s[WARNING]%s [%s] %s\n" "$YELLOW" "$NC" "$(date '+%Y-%m-%d %H:%M:%S')" "$1"
}

log_error() {
    printf "%s[ERROR]%s [%s] %s\n" "$RED" "$NC" "$(date '+%Y-%m-%d %H:%M:%S')" "$1" >&2
}

log_debug() {
    if [ "$DEBUG" = "1" ]; then
        printf "%s[DEBUG]%s [%s] %s\n" "$CYAN" "$NC" "$(date '+%Y-%m-%d %H:%M:%S')" "$1" >&2
    fi
}

log_success() {
    printf "%s[SUCCESS]%s [%s] %s\n" "$GREEN" "$NC" "$(date '+%Y-%m-%d %H:%M:%S')" "$1"
}

log_step() {
    printf "%s[STEP]%s [%s] %s\n" "$BLUE" "$NC" "$(date '+%Y-%m-%d %H:%M:%S')" "$1"
}

# Function to check prerequisites
check_prerequisites() {
    log_step "Checking prerequisites"
    
    # Check GitHub CLI
    if ! command -v gh >/dev/null 2>&1; then
        log_error "GitHub CLI (gh) not found - required for automation"
        exit 1
    fi
    
    # Check git
    if ! command -v git >/dev/null 2>&1; then
        log_error "Git not found - required for version control"
        exit 1
    fi
    
    # Check if we're in a git repository
    if ! git rev-parse --git-dir >/dev/null 2>&1; then
        log_error "Not in a git repository"
        exit 1
    fi
    
    # Check if authenticated with GitHub
    if ! gh auth status >/dev/null 2>&1; then
        log_error "Not authenticated with GitHub - run 'gh auth login'"
        exit 1
    fi
    
    log_success "All prerequisites met"
}

# Function to create feature branch
create_feature_branch() {
    branch_name="feature/automated-rutos-fixes-$(date +%Y%m%d-%H%M%S)"
    
    log_step "Creating feature branch: $branch_name"
    
    # Ensure we're on main
    git checkout main
    git pull origin main
    
    # Create and switch to feature branch
    git checkout -b "$branch_name"
    
    log_success "Created feature branch: $branch_name"
    printf "%s" "$branch_name" > /tmp/current_branch
}

# Function to run pre-commit validation
run_pre_commit_validation() {
    log_step "Running pre-commit validation to identify issues"
    
    if [ -f "./scripts/pre-commit-validation.sh" ]; then
        ./scripts/pre-commit-validation.sh > /tmp/pre_commit_output.txt 2>&1 || true
        log_success "Pre-commit validation completed - output saved to /tmp/pre_commit_output.txt"
    else
        log_error "Pre-commit validation script not found"
        exit 1
    fi
}

# Function to run automated fixes
run_automated_fixes() {
    log_step "Running automated RUTOS compatibility fixes"
    
    if [ -f "./scripts/automated-rutos-fixes.sh" ]; then
        chmod +x ./scripts/automated-rutos-fixes.sh
        ./scripts/automated-rutos-fixes.sh
        log_success "Automated fixes completed"
    else
        log_error "Automated fixes script not found"
        exit 1
    fi
}

# Function to commit changes
commit_changes() {
    log_step "Committing automated fixes"
    
    # Add all changes
    git add -A
    
    # Check if there are changes to commit
    if git diff --cached --quiet; then
        log_warning "No changes to commit"
        return 0
    fi
    
    # Commit with detailed message
    git commit -m "Automated RUTOS compatibility fixes

Applied automated fixes for RUTOS compatibility:
- Convert bash shebang to sh
- Remove 'local' keyword (not supported in busybox)
- Fix function definitions
- Add shellcheck disable comments
- Convert echo to printf (simple cases)
- Handle unused variables

Files processed: $(find . -name "*.sh" -type f | grep -v ".git" | wc -l)
Generated by: scripts/master-rutos-automation.sh v$SCRIPT_VERSION

Issues created in GitHub for manual review of complex cases.
All changes include backups (.backup files) for safety."
    
    log_success "Changes committed successfully"
}

# Function to push branch and create PR
create_pull_request() {
    branch_name=$(cat /tmp/current_branch)
    
    log_step "Pushing branch and creating pull request"
    
    # Push branch
    git push origin "$branch_name"
    
    # Create PR
    pr_title="Automated RUTOS Compatibility Fixes"
    pr_body="## Automated RUTOS Compatibility Fixes

This PR contains automated fixes for RUTOS compatibility issues identified by the pre-commit validation system.

### Changes Applied:
- ✅ **Bash to sh conversion**: Changed #!/bin/bash to #!/bin/sh
- ✅ **Local keyword removal**: Removed 'local' keyword (not supported in busybox)
- ✅ **Function definition fixes**: Corrected function syntax
- ✅ **Unused variable handling**: Added shellcheck disable comments
- ✅ **Echo to printf conversion**: Simple cases converted automatically
- ✅ **Shellcheck disable comments**: Added for dynamic source files

### Safety Measures:
- All modified files have .backup copies
- Only safe, well-tested transformations applied
- Complex cases flagged for manual review

### Files Processed:
$(find . -name "*.sh" -type f | grep -v ".git" | wc -l) shell scripts

### Manual Review Required:
Complex printf format strings and advanced bash patterns have been flagged in individual GitHub issues for manual review.

### Testing:
- [ ] All shell scripts pass basic syntax validation
- [ ] RUTOS compatibility verified
- [ ] No functionality regressions

**Generated by:** \`scripts/master-rutos-automation.sh v$SCRIPT_VERSION\`
**Branch:** \`$branch_name\`"

    pr_url=$(gh pr create \
        --title "$pr_title" \
        --body "$pr_body" \
        --label "rutos-compatibility,automated-fix,enhancement" \
        --assignee "@me")
    
    log_success "Pull request created: $pr_url"
    printf "%s" "$pr_url" > /tmp/current_pr
}

# Function to create summary issue
create_summary_issue() {
    pr_url=$(cat /tmp/current_pr)
    
    log_step "Creating summary issue for tracking"
    
    title="RUTOS Compatibility: Automated Fixes Summary"
    body="## Automated RUTOS Compatibility Fixes Summary

### Overview
This issue tracks the automated RUTOS compatibility fixes applied to the repository.

### Pull Request
$pr_url

### Automated Fixes Applied
- ✅ Bash shebang conversion (#!/bin/bash → #!/bin/sh)
- ✅ Local keyword removal (not supported in busybox)
- ✅ Function definition standardization
- ✅ Unused variable handling
- ✅ Echo to printf conversion (simple cases)
- ✅ Shellcheck disable comments

### Files Processed
$(find . -name "*.sh" -type f | grep -v ".git" | wc -l) shell scripts

### Next Steps
1. Review and merge the pull request
2. Address individual file issues created for manual review
3. Run comprehensive testing on RUTOS environment
4. Update documentation if needed

### Safety Notes
- All modified files have .backup copies
- Only safe, well-tested transformations applied
- Complex cases require manual review

**Generated by:** \`scripts/master-rutos-automation.sh v$SCRIPT_VERSION\`
**Date:** $(date '+%Y-%m-%d %H:%M:%S')

### Related Issues
Individual issues have been created for files requiring manual review."

    issue_url=$(gh issue create \
        --title "$title" \
        --body "$body" \
        --label "rutos-compatibility,automated-fix,tracking,high-priority" \
        --assignee "@me")
    
    log_success "Summary issue created: $issue_url"
}

# Function to clean up temporary files
cleanup() {
    log_step "Cleaning up temporary files"
    
    rm -f /tmp/current_branch
    rm -f /tmp/current_pr
    rm -f /tmp/pre_commit_output.txt
    
    log_success "Cleanup completed"
}

# Main execution function
main() {
    log_info "Starting master RUTOS automation v$SCRIPT_VERSION"
    
    # Debug mode support
    DEBUG="${DEBUG:-0}"
    if [ "$DEBUG" = "1" ]; then
        log_debug "Debug mode enabled"
    fi
    
    # Validate environment
    if [ ! -f "/etc/openwrt_release" ]; then
        log_debug "Not running on OpenWrt/RUTOS system - development mode"
    fi
    
    # Execute automation workflow
    check_prerequisites
    create_feature_branch
    run_pre_commit_validation
    run_automated_fixes
    commit_changes
    create_pull_request
    create_summary_issue
    cleanup
    
    log_success "Automation completed successfully!"
    log_info "Next steps:"
    log_info "1. Review the created pull request"
    log_info "2. Address individual file issues for manual review"
    log_info "3. Test changes on RUTOS environment"
    log_info "4. Merge when ready"
}

# Execute main function
main "$@"
