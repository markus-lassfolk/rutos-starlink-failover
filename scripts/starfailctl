#!/bin/sh
#
# starfailctl - CLI for starfail daemon
# Provides convenient access to ubus API methods
#

SCRIPT_NAME="starfailctl"
UBUS_SERVICE="starfail"

# Colors for output (BusyBox compatible)
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Print usage information
usage() {
    echo "Usage: $SCRIPT_NAME <command> [options]"
    echo ""
    echo "Commands:"
    echo "  status                    - Show daemon status and current member"
    echo "  members                   - List all discovered members with scores"
    echo "  metrics <name>            - Show detailed metrics for a member"
    echo "  history <name> [since_s]  - Show historical data for a member"
    echo "  events [limit]            - Show recent decision events"
    echo "  failover                  - Manually trigger failover to best backup"
    echo "  restore                   - Manually restore to primary member"
    echo "  recheck                   - Force member discovery and recheck"
    echo "  setlog <level>            - Set log level (debug|info|warn|error)"
    echo ""
    echo "Examples:"
    echo "  $SCRIPT_NAME status"
    echo "  $SCRIPT_NAME metrics wan_starlink"
    echo "  $SCRIPT_NAME history wan_cell 300"
    echo "  $SCRIPT_NAME events 50"
    echo "  $SCRIPT_NAME setlog debug"
}

# Check if ubus is available
check_ubus() {
    if ! command -v ubus >/dev/null 2>&1; then
        printf "${RED}Error:${NC} ubus command not found\n" >&2
        exit 1
    fi
}

# Check if starfail service is running
check_service() {
    if ! ubus list | grep -q "^$UBUS_SERVICE$"; then
        printf "${RED}Error:${NC} starfail service not available via ubus\n" >&2
        printf "Is the starfail daemon running?\n" >&2
        exit 1
    fi
}

# Format JSON output with color if supported
format_output() {
    if command -v jq >/dev/null 2>&1; then
        jq '.'
    else
        # Simple formatting without jq
        sed 's/,/,\n  /g' | sed 's/{/{\n  /' | sed 's/}/\n}/'
    fi
}

# Execute ubus call with error handling
ubus_call() {
    local method="$1"
    local params="$2"
    
    if [ -n "$params" ]; then
        result=$(ubus call "$UBUS_SERVICE" "$method" "$params" 2>&1)
    else
        result=$(ubus call "$UBUS_SERVICE" "$method" 2>&1)
    fi
    
    if [ $? -ne 0 ]; then
        printf "${RED}Error:${NC} ubus call failed\n" >&2
        echo "$result" >&2
        exit 1
    fi
    
    echo "$result" | format_output
}

# Main command dispatcher
case "$1" in
    "status")
        check_ubus
        check_service
        printf "${BLUE}Starfail Daemon Status:${NC}\n"
        ubus_call "status"
        ;;
        
    "members")
        check_ubus
        check_service
        printf "${BLUE}Member Interfaces:${NC}\n"
        ubus_call "members"
        ;;
        
    "metrics")
        if [ -z "$2" ]; then
            printf "${RED}Error:${NC} member name required\n" >&2
            echo "Usage: $SCRIPT_NAME metrics <member_name>"
            exit 1
        fi
        check_ubus
        check_service
        printf "${BLUE}Metrics for $2:${NC}\n"
        ubus_call "metrics" "{\"name\":\"$2\"}"
        ;;
        
    "history")
        if [ -z "$2" ]; then
            printf "${RED}Error:${NC} member name required\n" >&2
            echo "Usage: $SCRIPT_NAME history <member_name> [since_seconds]"
            exit 1
        fi
        since_s="${3:-600}"
        check_ubus
        check_service
        printf "${BLUE}History for $2 (last ${since_s}s):${NC}\n"
        ubus_call "history" "{\"name\":\"$2\",\"since_s\":$since_s}"
        ;;
        
    "events")
        limit="${2:-100}"
        check_ubus
        check_service
        printf "${BLUE}Recent Events (limit $limit):${NC}\n"
        ubus_call "events" "{\"limit\":$limit}"
        ;;
        
    "failover")
        check_ubus
        check_service
        printf "${YELLOW}Triggering manual failover...${NC}\n"
        ubus_call "action" '{"cmd":"failover"}'
        ;;
        
    "restore")
        check_ubus
        check_service
        printf "${YELLOW}Triggering manual restore...${NC}\n"
        ubus_call "action" '{"cmd":"restore"}'
        ;;
        
    "recheck")
        check_ubus
        check_service
        printf "${YELLOW}Forcing member discovery recheck...${NC}\n"
        ubus_call "action" '{"cmd":"recheck"}'
        ;;
        
    "setlog")
        if [ -z "$2" ]; then
            printf "${RED}Error:${NC} log level required\n" >&2
            echo "Usage: $SCRIPT_NAME setlog <debug|info|warn|error>"
            exit 1
        fi
        case "$2" in
            "debug"|"info"|"warn"|"error")
                check_ubus
                check_service
                printf "${YELLOW}Setting log level to $2...${NC}\n"
                ubus_call "action" "{\"cmd\":\"set_level\",\"level\":\"$2\"}"
                ;;
            *)
                printf "${RED}Error:${NC} invalid log level '$2'\n" >&2
                echo "Valid levels: debug, info, warn, error"
                exit 1
                ;;
        esac
        ;;
        
    "help"|"--help"|"-h"|"")
        usage
        ;;
        
    *)
        printf "${RED}Error:${NC} unknown command '$1'\n" >&2
        echo ""
        usage
        exit 1
        ;;
esac
