syntax = "proto3";

package SpaceX.API.Device;

option go_package = "github.com/starfail/starfail/pkg/proto/starlink";

// Device service definition
service Device {
  rpc Handle(Request) returns (Response);
}

// Request message
message Request {
  oneof request {
    GetStatusRequest get_status = 1;
    GetHistoryRequest get_history = 2;
    GetDeviceInfoRequest get_device_info = 3;
    GetLocationRequest get_location = 4;
    GetDiagnosticsRequest get_diagnostics = 5;
  }
}

// Response message
message Response {
  oneof response {
    DishGetStatusResponse dishGetStatus = 1;
    DishGetHistoryResponse dishGetHistory = 2;
    DeviceInfoResponse deviceInfo = 3;
    GetLocationResponse getLocation = 4;
    DishGetDiagnosticsResponse dishGetDiagnostics = 5;
  }
}

// Request types
message GetStatusRequest {}
message GetHistoryRequest {}
message GetDeviceInfoRequest {}
message GetLocationRequest {}
message GetDiagnosticsRequest {}

// Device Info
message DeviceInfo {
  string id = 1;
  string hardwareVersion = 2;
  string softwareVersion = 3;
  string countryCode = 4;
  int32 utcOffsetS = 5;
  string softwarePartNumber = 6;
  int32 generationNumber = 7;
  bool dishCohoused = 8;
  int64 utcnsOffsetNs = 9;
}

message DeviceInfoResponse {
  DeviceInfo deviceInfo = 1;
}

// Device State
message DeviceState {
  uint64 uptimeS = 1;
}

// Obstruction Stats
message ObstructionStats {
  bool currentlyObstructed = 1;
  double fractionObstructed = 2;
  int32 validS = 3;
  repeated double wedgeFractionObstructed = 4;
  repeated double wedgeAbsFractionObstructed = 5;
  int32 last24hObstructedS = 6;
  double timeObstructed = 7;
  int32 patchesValid = 8;
  double avgProlongedObstructionIntervalS = 9;
}

// GPS Stats
message GpsStats {
  bool gpsValid = 1;
  int32 gpsSats = 2;
  int32 noSatsAfterTtff = 3;
  bool inhibitGps = 4;
}

// Location data
message LLAPosition {
  double lat = 1;
  double lon = 2;
  double alt = 3;
}

message ECEFPosition {
  double x = 1;
  double y = 2;
  double z = 3;
}

message GetLocationResponse {
  LLAPosition lla = 1;
  ECEFPosition ecef = 2;
  string source = 3;
}

// Alerts for diagnostics
message DishAlerts {
  bool roaming = 1;
  bool thermalThrottle = 2;
  bool thermalShutdown = 3;
  bool mastNotNearVertical = 4;
  bool unexpectedLocation = 5;
  bool slowEthernetSpeeds = 6;
  bool softwareUpdateReboot = 7;
  bool lowPowerMode = 8;
}

// Status Response
message DishGetStatusResponse {
  DeviceInfo deviceInfo = 1;
  DeviceState deviceState = 2;
  ObstructionStats obstructionStats = 3;
  double popPingLatencyMs = 4;
  double downlinkThroughputBps = 5;
  double uplinkThroughputBps = 6;
  double snr = 7;
  int32 secondsToFirstNonemptySlot = 8;
  double popPingDropRate = 9;
  double boresightAzimuthDeg = 10;
  double boresightElevationDeg = 11;
  GpsStats gpsStats = 12;
  int32 ethSpeedMbps = 13;
  string mobilityClass = 14;
  bool isSnrAboveNoiseFloor = 15;
  string classOfService = 16;
  string softwareUpdateState = 17;
  bool isSnrPersistentlyLow = 18;
  bool swupdateRebootReady = 19;
}

// History Response
message DishGetHistoryResponse {
  int32 current = 1;
  repeated double popPingDropRate = 2;
  repeated double popPingLatencyMs = 3;
  repeated double downlinkThroughputBps = 4;
  repeated double uplinkThroughputBps = 5;
  repeated double snr = 6;
  repeated bool scheduled = 7;
  repeated bool obstructed = 8;
}

// Diagnostics Response
message DishGetDiagnosticsResponse {
  string id = 1;
  string hardwareVersion = 2;
  string softwareVersion = 3;
  DishAlerts alerts = 4;
  string disablementCode = 5;
  string softwareUpdateState = 6;
  bool isSnrAboveNoiseFloor = 7;
  string classOfService = 8;
}
