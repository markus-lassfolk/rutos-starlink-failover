#!/bin/sh

# Test script for deployment functions
# This simulates a RUTOS environment and tests key functions

set -eu

# Source colors and basic functions from the main script
# Check if terminal supports colors
# shellcheck disable=SC2034  # Color variables may not all be used in every script

# Version information (auto-updated by update-version.sh)
SCRIPT_VERSION="2.6.0"
readonly SCRIPT_VERSION
if [ -t 1 ] && [ "${TERM:-}" != "dumb" ] && [ "${NO_COLOR:-}" != "1" ]; then
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    BLUE='\033[0;34m'
    CYAN='\033[0;36m'
    # shellcheck disable=SC2034  # Used in some conditional contexts
    PURPLE='\033[0;35m'
    NC='\033[0m'
else
    # Fallback to no colors if terminal doesn't support them
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    CYAN=""
    PURPLE=""
    NC=""
fi

# Test directory
TEST_DIR="/tmp/starlink-test-$$"
mkdir -p "$TEST_DIR"
cd "$TEST_DIR"

# Logging functions
log() {
    printf "${CYAN}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} %s\n" "$1"
}

log_success() {
    printf "${GREEN}✓${NC} %s\n" "$1"
}

log_warn() {
    printf "${YELLOW}⚠${NC} %s\n" "$1"
}

log_error() {
    printf "${RED}✗${NC} %s\n" "$1"
}

log_info() {
    printf "${BLUE}ℹ${NC} %s\n" "$1"
}

log_header() {
    printf "\n"
    printf "${PURPLE}=== %s ===${NC}\n" "$1"
    printf "\n"
}

# Test input validation functions
validate_ip() {
    ip="$1"
    if echo "$ip" | grep -qE '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$'; then
        return 0
    else
        return 1
    fi
}

validate_url() {
    url="$1"
    if echo "$url" | grep -qE '^https?://'; then
        return 0
    else
        return 1
    fi
}

# Test script generation functions
test_script_generation() {
    log_header "Testing Script Generation"

    # Test configuration values
    export STARLINK_IP="192.168.100.1"
    export ENABLE_AZURE="true"
    export AZURE_ENDPOINT="https://test-function.azurewebsites.net/api/HttpTrigger"
    export ENABLE_PUSHOVER="false"
    export PUSHOVER_TOKEN=""
    export PUSHOVER_USER=""

    # Test starlink monitor script generation
    log "Testing Starlink monitor script generation..."
    cat >"starlink_monitor.sh" <<'EOF'
#!/bin/sh
# Starlink Quality Monitor - Generated by deployment script
set -eu

# Load configuration
CONFIG_FILE="/root/config.sh"
if [ -f "$CONFIG_FILE" ]; then
    . "$CONFIG_FILE"
fi

# Default configuration
STARLINK_IP="${STARLINK_IP:-192.168.100.1:9200}"
MWAN_IFACE="${MWAN_IFACE:-wan}"
MWAN_MEMBER="${MWAN_MEMBER:-member1}"
METRIC_GOOD="${METRIC_GOOD:-1}"
METRIC_BAD="${METRIC_BAD:-100}"
PACKET_LOSS_THRESHOLD="${PACKET_LOSS_THRESHOLD:-0.05}"
OBSTRUCTION_THRESHOLD="${OBSTRUCTION_THRESHOLD:-0.001}"
LATENCY_THRESHOLD_MS="${LATENCY_THRESHOLD_MS:-150}"
STABILITY_CHECKS_REQUIRED="${STABILITY_CHECKS_REQUIRED:-5}"

# State files
STATE_FILE="/tmp/run/starlink_monitor.state"
STABILITY_FILE="/tmp/run/starlink_monitor.stability"
LOG_TAG="StarlinkMonitor"

# Create state directory
mkdir -p "$(dirname "$STATE_FILE")"

# Logging function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

echo "Starlink monitor script initialized successfully"
echo "Configuration loaded: STARLINK_IP=$STARLINK_IP"
echo "Thresholds: Latency=${LATENCY_THRESHOLD_MS}ms, PacketLoss=${PACKET_LOSS_THRESHOLD}, Obstruction=${OBSTRUCTION_THRESHOLD}"
EOF

    chmod +x starlink_monitor.sh

    # Test the script
    if bash -n starlink_monitor.sh; then
        log_success "Starlink monitor script syntax is valid"
    else
        log_error "Starlink monitor script has syntax errors"
        return 1
    fi

    # Test execution
    if ./starlink_monitor.sh 2>/dev/null; then
        log_success "Starlink monitor script executes without errors"
    else
        log_warn "Starlink monitor script execution test (expected - no grpcurl/jq in test environment)"
    fi

    # Test logger script generation
    log "Testing performance logger script generation..."
    cat >"starlink_logger.sh" <<'EOF'
#!/bin/sh
# Starlink Performance Logger - Generated by deployment script
set -eu

# Configuration
STARLINK_IP="${STARLINK_IP:-192.168.100.1:9200}"
OUTPUT_CSV="/tmp/starlink_performance_log.csv"
LAST_SAMPLE_FILE="/tmp/run/starlink_last_sample.ts"
LOG_TAG="StarlinkLogger"

# Create state directory
mkdir -p "$(dirname "$LAST_SAMPLE_FILE")"

# Logging function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

# Create CSV header if file doesn't exist
if [ ! -f "$OUTPUT_CSV" ]; then
    echo "timestamp,latency_ms,packet_loss_rate,obstruction_percent,throughput_down_mbps,throughput_up_mbps" > "$OUTPUT_CSV"
fi

echo "Performance logger script initialized successfully"
echo "Output CSV: $OUTPUT_CSV"
if [ -f "$OUTPUT_CSV" ]; then
    echo "CSV header: $(head -1 "$OUTPUT_CSV")"
fi
EOF

    chmod +x starlink_logger.sh

    if bash -n starlink_logger.sh && ./starlink_logger.sh; then
        log_success "Performance logger script is valid and executable"
    else
        log_error "Performance logger script has issues"
        return 1
    fi

    # Test configuration file generation
    log "Testing configuration file generation..."
    cat >"config.sh" <<EOF
#!/bin/sh
# Starlink Solution Configuration - Generated by deployment script

# === NETWORK CONFIGURATION ===
STARLINK_IP="$STARLINK_IP"
MWAN_IFACE="wan"
MWAN_MEMBER="member1"

# === QUALITY THRESHOLDS ===
PACKET_LOSS_THRESHOLD="0.05"
OBSTRUCTION_THRESHOLD="0.001"
LATENCY_THRESHOLD_MS="150"
STABILITY_CHECKS_REQUIRED="5"

# === FAILOVER METRICS ===
METRIC_GOOD="1"
METRIC_BAD="100"

# === PUSHOVER CONFIGURATION ===
PUSHOVER_ENABLED="false"
PUSHOVER_TOKEN=""
PUSHOVER_USER=""

# === AZURE CONFIGURATION ===
AZURE_ENABLED="$ENABLE_AZURE"
AZURE_ENDPOINT="$AZURE_ENDPOINT"

# === LOGGING CONFIGURATION ===
LOG_TAG="StarlinkSolution"
STATE_FILE="/tmp/run/starlink_monitor.state"
STABILITY_FILE="/tmp/run/starlink_monitor.stability"
OUTPUT_CSV="/tmp/starlink_performance_log.csv"
EOF

    if bash -n config.sh; then
        log_success "Configuration file syntax is valid"
        # Test sourcing the config
        # shellcheck disable=SC1091
        if . config.sh; then
            log_success "Configuration file sources correctly"
            log_info "Test values: STARLINK_IP=$STARLINK_IP, AZURE_ENABLED=$AZURE_ENABLED"
        else
            log_error "Configuration file cannot be sourced"
            return 1
        fi
    else
        log_error "Configuration file has syntax errors"
        return 1
    fi
}

# Test validation functions
test_validation_functions() {
    log_header "Testing Validation Functions"

    # Test IP validation
    log "Testing IP address validation..."

    valid_ips="192.168.1.1 10.0.0.1 172.16.0.1"
    invalid_ips="999.999.999.999 192.168.1 not.an.ip"

    for ip in $valid_ips; do
        if validate_ip "$ip"; then
            log_success "Valid IP correctly accepted: $ip"
        else
            log_error "Valid IP incorrectly rejected: $ip"
            return 1
        fi
    done

    for ip in $invalid_ips; do
        if validate_ip "$ip"; then
            log_error "Invalid IP incorrectly accepted: $ip"
            return 1
        else
            log_success "Invalid IP correctly rejected: $ip"
        fi
    done

    # Test URL validation
    log "Testing URL validation..."

    valid_urls="https://example.com http://test.azure.com/api/func https://subdomain.domain.com/path?query=value"
    invalid_urls="ftp://example.com example.com not-a-url"

    for url in $valid_urls; do
        if validate_url "$url"; then
            log_success "Valid URL correctly accepted: $url"
        else
            log_error "Valid URL incorrectly rejected: $url"
            return 1
        fi
    done

    for url in $invalid_urls; do
        if validate_url "$url"; then
            log_error "Invalid URL incorrectly accepted: $url"
            return 1
        else
            log_success "Invalid URL correctly rejected: $url"
        fi
    done
}

# Test verification script generation
test_verification_script() {
    log_header "Testing Verification Script Generation"

    log "Generating verification script..."
    cat >"verify-starlink-setup.sh" <<'EOF'
#!/bin/sh
# Starlink Solution Verification Script
set -eu

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Test counters
TESTS_PASSED=0
TESTS_FAILED=0
TESTS_WARNED=0

# Logging functions
log_test() {
    printf "${BLUE}[TEST]${NC} %s\n" "$1"
}

log_pass() {
    printf "${GREEN}[PASS]${NC} %s\n" "$1"
    TESTS_PASSED=$((TESTS_PASSED + 1))
}

log_fail() {
    printf "${RED}[FAIL]${NC} %s\n" "$1"
    TESTS_FAILED=$((TESTS_FAILED + 1))
}

log_warn() {
    printf "${YELLOW}[WARN]${NC} %s\n" "$1"
    TESTS_WARNED=$((TESTS_WARNED + 1))
}

# Test utility that can run without RUTOS dependencies
test_basic_utility() {
    log_test "Testing basic script functionality..."
    
    # Test that we can create state directories
    if mkdir -p /tmp/test-state-dir; then
        log_pass "State directory creation works"
        rm -rf /tmp/test-state-dir
    else
        log_fail "Cannot create state directories"
    fi
    
    # Test that basic commands work
    if command -v date >/dev/null; then
        log_pass "Date command available"
    else
        log_fail "Date command not available"
    fi
    
    if command -v bc >/dev/null 2>&1; then
        log_pass "bc calculator available"
    else
        log_warn "bc calculator not available (acceptable in test environment)"
    fi
}

# Run basic tests
test_basic_utility

# Summary
echo "========================================="
echo "Test Summary"
echo "========================================="
printf "${GREEN}Tests Passed: %d${NC}\n" "$TESTS_PASSED"
printf "${YELLOW}Tests Warned: %d${NC}\n" "$TESTS_WARNED"
printf "${RED}Tests Failed: %d${NC}\n" "$TESTS_FAILED"

if [ "$TESTS_FAILED" -eq 0 ]; then
    printf "${GREEN}✓ Basic verification tests passed!${NC}\n"
    exit 0
else
    printf "${RED}✗ Some tests failed${NC}\n"
    exit 1
fi
EOF

    chmod +x verify-starlink-setup.sh

    if bash -n verify-starlink-setup.sh; then
        log_success "Verification script syntax is valid"

        # Test execution
        if ./verify-starlink-setup.sh; then
            log_success "Verification script executes successfully"
        else
            log_error "Verification script execution failed"
            return 1
        fi
    else
        log_error "Verification script has syntax errors"
        return 1
    fi
}

# Test cron job format
test_cron_format() {
    log_header "Testing Cron Job Format"

    log "Testing cron job syntax..."

    # Create a test crontab
    cat >test_crontab <<'EOF'
# Starlink Quality Monitoring (every minute)
* * * * * /root/starlink_monitor.sh
# Starlink Performance Logging (every minute)
* * * * * /root/starlink_logger.sh
# Starlink API Change Detection (daily at 5:30 AM)
30 5 * * * /root/check_starlink_api.sh
# Azure Log Shipping (every 5 minutes)
*/5 * * * * /root/log-shipper.sh
EOF

    # Basic cron syntax validation
    if grep -E '^[0-9*,/-]+ [0-9*,/-]+ [0-9*,/-]+ [0-9*,/-]+ [0-9*,/-]+ ' test_crontab >/dev/null; then
        log_success "Cron job syntax appears valid"
    else
        log_error "Cron job syntax validation failed"
        return 1
    fi

    # Check for common cron patterns
    if grep -q "^\* \* \* \* \*" test_crontab; then
        log_success "Found every-minute cron jobs"
    else
        log_error "Every-minute cron jobs not found"
        return 1
    fi

    if grep -q "^30 5 \* \* \*" test_crontab; then
        log_success "Found daily cron job"
    else
        log_error "Daily cron job not found"
        return 1
    fi

    if grep -q "^\*/5 \* \* \* \*" test_crontab; then
        log_success "Found every-5-minutes cron job"
    else
        log_error "Every-5-minutes cron job not found"
        return 1
    fi
}

# Test Azure logging script
test_azure_logging() {
    log_header "Testing Azure Logging Script"

    log "Generating Azure log shipper..."
    cat >"log-shipper.sh" <<'EOF'
#!/bin/sh
# Azure Log Shipper - Test version
set -eu

# Test configuration
AZURE_ENDPOINT="https://test-function.azurewebsites.net/api/HttpTrigger"
LOG_FILE="/tmp/test_messages"
MAX_SIZE="1048576"

echo "Azure Log Shipper Test"
echo "Endpoint: $AZURE_ENDPOINT"
echo "Log file: $LOG_FILE"
echo "Max size: $MAX_SIZE"

# Create a test log file
echo "$(date): Test log entry" > "$LOG_FILE"
echo "$(date): Another test entry" >> "$LOG_FILE"

if [ -f "$LOG_FILE" ] && [ -s "$LOG_FILE" ]; then
    file_size=$(stat -c%s "$LOG_FILE" 2>/dev/null || echo "0")
    echo "Log file size: $file_size bytes"
    
    if [ "$file_size" -gt 0 ]; then
        echo "Would ship logs to Azure (test mode - not actually sending)"
        echo "Log contents:"
        cat "$LOG_FILE"
    fi
else
    echo "No logs to ship"
fi
EOF

    chmod +x log-shipper.sh

    if bash -n log-shipper.sh; then
        log_success "Azure log shipper syntax is valid"

        if ./log-shipper.sh; then
            log_success "Azure log shipper executes successfully"
        else
            log_error "Azure log shipper execution failed"
            return 1
        fi
    else
        log_error "Azure log shipper has syntax errors"
        return 1
    fi
}

# Main test execution
main() {
    if [ "$DEBUG" = "1" ]; then
        printf "Debug script version: %s\n" "$SCRIPT_VERSION"
    fi
    log_header "Starlink Deployment Script Testing"

    echo "Testing deployment script components..."
    echo "Test directory: $TEST_DIR"
    echo

    # Run all tests
    test_results=0

    test_validation_functions || test_results=$((test_results + 1))
    test_script_generation || test_results=$((test_results + 1))
    test_verification_script || test_results=$((test_results + 1))
    test_cron_format || test_results=$((test_results + 1))
    test_azure_logging || test_results=$((test_results + 1))

    # Cleanup
    log_header "Cleanup"
    cd /
    rm -rf "$TEST_DIR"
    log_success "Test directory cleaned up"

    # Final result
    echo
    log_header "Final Test Results"

    if [ "$test_results" -eq 0 ]; then
        log_success "🎉 All deployment script tests passed!"
        echo
        log_info "The deployment script components are functioning correctly:"
        log_info "  ✓ Input validation functions work properly"
        log_info "  ✓ Script generation produces valid bash scripts"
        log_info "  ✓ Verification script executes successfully"
        log_info "  ✓ Cron job syntax is correct"
        log_info "  ✓ Azure logging components function properly"
        echo
        log_info "The deployment script is ready for use on RUTOS devices."
        return 0
    else
        log_error "❌ $test_results test suite(s) failed"
        echo
        log_error "Please review the failed tests above and fix any issues."
        return 1
    fi
}

# Execute main function
main "$@"
