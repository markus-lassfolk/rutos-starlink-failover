<%+header%>

<h2><%:Starfail Telemetry - Data & Analytics%></h2>

<div class="cbi-section">
    <div class="cbi-section-descr"><%:View telemetry data and performance analytics.%></div>
    
    <!-- Telemetry Overview -->
    <div class="cbi-section">
        <h3><%:Telemetry Overview%></h3>
        <div class="cbi-section-descr"><%:Current telemetry collection status and statistics.%></div>
        
        <div class="telemetry-stats">
            <div class="stat-item">
                <div class="stat-value" id="total-samples">-</div>
                <div class="stat-label"><%:Total Samples%></div>
            </div>
            <div class="stat-item">
                <div class="stat-value" id="total-events">-</div>
                <div class="stat-label"><%:Total Events%></div>
            </div>
            <div class="stat-item">
                <div class="stat-value" id="memory-usage">-</div>
                <div class="stat-label"><%:Memory Usage%></div>
            </div>
            <div class="stat-item">
                <div class="stat-value" id="retention-time">-</div>
                <div class="stat-label"><%:Retention Time%></div>
            </div>
        </div>
    </div>
    
    <!-- Recent Samples -->
    <div class="cbi-section">
        <h3><%:Recent Samples%></h3>
        <div class="cbi-section-descr"><%:Latest telemetry samples from all members.%></div>
        
        <div class="table">
            <div class="tr table-titles">
                <div class="th"><%:Timestamp%></div>
                <div class="th"><%:Member%></div>
                <div class="th"><%:Latency (ms)%></div>
                <div class="th"><%:Packet Loss (%)%></div>
                <div class="th"><%:Health Score%></div>
                <div class="th"><%:Status%></div>
            </div>
            <div id="samples-table-body">
                <!-- Samples will be populated by JavaScript -->
            </div>
        </div>
    </div>
    
    <!-- Recent Events -->
    <div class="cbi-section">
        <h3><%:Recent Events%></h3>
        <div class="cbi-section-descr"><%:Latest system events and status changes.%></div>
        
        <div class="table">
            <div class="tr table-titles">
                <div class="th"><%:Timestamp%></div>
                <div class="th"><%:Event Type%></div>
                <div class="th"><%:Member%></div>
                <div class="th"><%:Message%></div>
                <div class="th"><%:Level%></div>
            </div>
            <div id="events-table-body">
                <!-- Events will be populated by JavaScript -->
            </div>
        </div>
    </div>
    
    <!-- Health Summary -->
    <div class="cbi-section">
        <h3><%:Health Summary%></h3>
        <div class="cbi-section-descr"><%:Current health status of all members.%></div>
        
        <div id="health-summary">
            <!-- Health summary will be populated by JavaScript -->
        </div>
    </div>
</div>

<style>
.telemetry-stats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 20px;
    margin: 20px 0;
}

.stat-item {
    text-align: center;
    padding: 20px;
    background: #f9f9f9;
    border-radius: 8px;
    border: 1px solid #ddd;
}

.stat-value {
    font-size: 24px;
    font-weight: bold;
    color: #2196F3;
    margin-bottom: 8px;
}

.stat-label {
    font-size: 12px;
    color: #666;
    text-transform: uppercase;
}

.table {
    width: 100%;
    border-collapse: collapse;
    margin: 20px 0;
}

.tr {
    display: flex;
    border-bottom: 1px solid #ddd;
}

.th, .td {
    flex: 1;
    padding: 12px 8px;
    text-align: left;
    border-right: 1px solid #eee;
    font-size: 12px;
}

.th {
    background: #f5f5f5;
    font-weight: bold;
    color: #333;
}

.td {
    background: white;
}

.tr:hover .td {
    background: #f9f9f9;
}

.event-info {
    color: #2196F3;
}

.event-warning {
    color: #ff9800;
}

.event-error {
    color: #f44336;
}

.event-success {
    color: #4CAF50;
}

.health-summary-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 15px;
    margin: 20px 0;
}

.health-card {
    background: white;
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 15px;
}

.health-card-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
    padding-bottom: 10px;
    border-bottom: 1px solid #eee;
}

.health-card-title {
    font-weight: bold;
    color: #333;
}

.health-score {
    font-size: 18px;
    font-weight: bold;
}

.health-excellent { color: #4CAF50; }
.health-good { color: #8BC34A; }
.health-fair { color: #ff9800; }
.health-poor { color: #f44336; }

.health-metrics {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 8px;
    font-size: 12px;
}

.health-metric {
    display: flex;
    justify-content: space-between;
}

.metric-label {
    color: #666;
}

.metric-value {
    font-weight: bold;
    color: #333;
}
</style>

<script type="text/javascript">
// Load telemetry data
function loadTelemetry() {
    XHR.get('<%=luci.dispatcher.build_url("admin", "network", "starfail", "telemetry_data")%>', null, function(xhr) {
        if (xhr.status === 200) {
            const data = JSON.parse(xhr.responseText);
            updateTelemetryDisplay(data);
        }
    });
}

// Update telemetry display
function updateTelemetryDisplay(data) {
    updateTelemetryStats(data);
    updateSamplesTable(data.samples || []);
    updateEventsTable(data.events || []);
    updateHealthSummary(data.health || {});
}

// Update telemetry statistics
function updateTelemetryStats(data) {
    document.getElementById('total-samples').textContent = data.samples ? data.samples.length : 0;
    document.getElementById('total-events').textContent = data.events ? data.events.length : 0;
    document.getElementById('memory-usage').textContent = formatMemory(data.memory_usage);
    document.getElementById('retention-time').textContent = formatDuration(data.retention_time);
}

// Update samples table
function updateSamplesTable(samples) {
    const tableBody = document.getElementById('samples-table-body');
    tableBody.innerHTML = '';
    
    if (samples.length === 0) {
        const row = document.createElement('div');
        row.className = 'tr';
        row.innerHTML = '<div class="td" style="flex: 6; text-align: center; color: #666;">No samples available</div>';
        tableBody.appendChild(row);
        return;
    }
    
    // Show last 20 samples
    const recentSamples = samples.slice(-20).reverse();
    
    recentSamples.forEach(sample => {
        const row = document.createElement('div');
        row.className = 'tr';
        
        const healthClass = getHealthClass(sample.health_score);
        
        row.innerHTML = `
            <div class="td">${formatTimestamp(sample.timestamp)}</div>
            <div class="td">${sample.member_name || 'Unknown'}</div>
            <div class="td">${Math.round(sample.latency || 0)}</div>
            <div class="td">${(sample.packet_loss || 0).toFixed(2)}</div>
            <div class="td ${healthClass}">${Math.round(sample.health_score || 0)}</div>
            <div class="td">${sample.status || 'Unknown'}</div>
        `;
        
        tableBody.appendChild(row);
    });
}

// Update events table
function updateEventsTable(events) {
    const tableBody = document.getElementById('events-table-body');
    tableBody.innerHTML = '';
    
    if (events.length === 0) {
        const row = document.createElement('div');
        row.className = 'tr';
        row.innerHTML = '<div class="td" style="flex: 5; text-align: center; color: #666;">No events available</div>';
        tableBody.appendChild(row);
        return;
    }
    
    // Show last 20 events
    const recentEvents = events.slice(-20).reverse();
    
    recentEvents.forEach(event => {
        const row = document.createElement('div');
        row.className = 'tr';
        
        const levelClass = getEventLevelClass(event.level);
        
        row.innerHTML = `
            <div class="td">${formatTimestamp(event.timestamp)}</div>
            <div class="td">${event.type || 'Unknown'}</div>
            <div class="td">${event.member_name || 'System'}</div>
            <div class="td">${event.message || event.type}</div>
            <div class="td ${levelClass}">${event.level || 'info'}</div>
        `;
        
        tableBody.appendChild(row);
    });
}

// Update health summary
function updateHealthSummary(health) {
    const summaryContainer = document.getElementById('health-summary');
    summaryContainer.innerHTML = '';
    
    if (!health.members || health.members.length === 0) {
        summaryContainer.innerHTML = '<div style="text-align: center; color: #666; padding: 20px;">No health data available</div>';
        return;
    }
    
    const grid = document.createElement('div');
    grid.className = 'health-summary-grid';
    
    health.members.forEach(member => {
        const card = document.createElement('div');
        card.className = 'health-card';
        
        const healthClass = getHealthClass(member.health_score);
        
        card.innerHTML = `
            <div class="health-card-header">
                <div class="health-card-title">${member.name || 'Unknown'}</div>
                <div class="health-score ${healthClass}">${Math.round(member.health_score || 0)}</div>
            </div>
            <div class="health-metrics">
                <div class="health-metric">
                    <span class="metric-label">Status:</span>
                    <span class="metric-value">${member.status || 'Unknown'}</span>
                </div>
                <div class="health-metric">
                    <span class="metric-label">Latency:</span>
                    <span class="metric-value">${Math.round(member.latency || 0)} ms</span>
                </div>
                <div class="health-metric">
                    <span class="metric-label">Packet Loss:</span>
                    <span class="metric-value">${(member.packet_loss || 0).toFixed(2)}%</span>
                </div>
                <div class="health-metric">
                    <span class="metric-label">Uptime:</span>
                    <span class="metric-value">${formatUptime(member.uptime)}</span>
                </div>
            </div>
        `;
        
        grid.appendChild(card);
    });
    
    summaryContainer.appendChild(grid);
}

// Helper functions
function getHealthClass(score) {
    if (score >= 80) return 'health-excellent';
    if (score >= 60) return 'health-good';
    if (score >= 40) return 'health-fair';
    return 'health-poor';
}

function getEventLevelClass(level) {
    switch(level) {
        case 'error': return 'event-error';
        case 'warning': return 'event-warning';
        case 'success': return 'event-success';
        default: return 'event-info';
    }
}

function formatTimestamp(timestamp) {
    if (!timestamp) return 'Never';
    const date = new Date(timestamp);
    return date.toLocaleTimeString();
}

function formatMemory(bytes) {
    if (!bytes) return 'N/A';
    const mb = bytes / (1024 * 1024);
    return `${mb.toFixed(1)} MB`;
}

function formatDuration(seconds) {
    if (!seconds) return 'N/A';
    const hours = Math.floor(seconds / 3600);
    return `${hours}h`;
}

function formatUptime(seconds) {
    if (!seconds) return 'N/A';
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    return `${hours}h ${minutes}m`;
}

// Initialize page
document.addEventListener('DOMContentLoaded', function() {
    loadTelemetry();
    setInterval(loadTelemetry, 15000); // Refresh every 15 seconds
});
</script>

<%+footer%>
