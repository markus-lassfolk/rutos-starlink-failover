<%+header%>

<h2><%:Starfail Members - Interface Status%></h2>

<div class="cbi-section">
    <div class="cbi-section-descr"><%:Monitor and manage failover member interfaces.%></div>
    
    <!-- Members Table -->
    <div class="cbi-section">
        <h3><%:Member Interfaces%></h3>
        <div class="cbi-section-descr"><%:Current status and health of all member interfaces.%></div>
        
        <div class="table">
            <div class="tr table-titles">
                <div class="th"><%:Interface%></div>
                <div class="th"><%:Type%></div>
                <div class="th"><%:Status%></div>
                <div class="th"><%:Health Score%></div>
                <div class="th"><%:Latency (ms)%></div>
                <div class="th"><%:Packet Loss (%)%></div>
                <div class="th"><%:Last Update%></div>
            </div>
            <div id="members-table-body">
                <!-- Members will be populated by JavaScript -->
            </div>
        </div>
    </div>
    
    <!-- Member Details -->
    <div class="cbi-section">
        <h3><%:Selected Member Details%></h3>
        <div class="cbi-section-descr"><%:Detailed information about the selected member.%></div>
        <div id="member-details">
            <div class="member-detail-item">
                <span class="detail-label"><%:Interface Name%>:</span>
                <span id="detail-name" class="detail-value">-</span>
            </div>
            <div class="member-detail-item">
                <span class="detail-label"><%:Interface Type%>:</span>
                <span id="detail-type" class="detail-value">-</span>
            </div>
            <div class="member-detail-item">
                <span class="detail-label"><%:IP Address%>:</span>
                <span id="detail-ip" class="detail-value">-</span>
            </div>
            <div class="member-detail-item">
                <span class="detail-label"><%:Gateway%>:</span>
                <span id="detail-gateway" class="detail-value">-</span>
            </div>
            <div class="member-detail-item">
                <span class="detail-label"><%:Uptime%>:</span>
                <span id="detail-uptime" class="detail-value">-</span>
            </div>
            <div class="member-detail-item">
                <span class="detail-label"><%:Total Traffic%>:</span>
                <span id="detail-traffic" class="detail-value">-</span>
            </div>
            <div class="member-detail-item">
                <span class="detail-label"><%:Signal Strength%>:</span>
                <span id="detail-signal" class="detail-value">-</span>
            </div>
            <div class="member-detail-item">
                <span class="detail-label"><%:Data Cap Status%>:</span>
                <span id="detail-datacap" class="detail-value">-</span>
            </div>
        </div>
    </div>
</div>

<style>
.table {
    width: 100%;
    border-collapse: collapse;
    margin: 20px 0;
}

.tr {
    display: flex;
    border-bottom: 1px solid #ddd;
}

.th, .td {
    flex: 1;
    padding: 12px 8px;
    text-align: left;
    border-right: 1px solid #eee;
}

.th {
    background: #f5f5f5;
    font-weight: bold;
    color: #333;
}

.td {
    background: white;
}

.tr:hover .td {
    background: #f9f9f9;
}

.status-active {
    color: #4CAF50;
    font-weight: bold;
}

.status-inactive {
    color: #f44336;
    font-weight: bold;
}

.status-unknown {
    color: #ff9800;
    font-weight: bold;
}

.health-excellent {
    color: #4CAF50;
}

.health-good {
    color: #8BC34A;
}

.health-fair {
    color: #ff9800;
}

.health-poor {
    color: #f44336;
}

.member-detail-item {
    display: flex;
    justify-content: space-between;
    padding: 8px 0;
    border-bottom: 1px solid #eee;
}

.detail-label {
    font-weight: bold;
    color: #666;
    min-width: 150px;
}

.detail-value {
    color: #333;
    flex: 1;
}

.selected-member {
    background: #e3f2fd !important;
}
</style>

<script type="text/javascript">
let selectedMember = null;

// Load members data
function loadMembers() {
    XHR.get('<%=luci.dispatcher.build_url("admin", "network", "starfail", "members_data")%>', null, function(xhr) {
        if (xhr.status === 200) {
            const data = JSON.parse(xhr.responseText);
            updateMembersTable(data);
        }
    });
}

// Update members table
function updateMembersTable(members) {
    const tableBody = document.getElementById('members-table-body');
    tableBody.innerHTML = '';
    
    if (members.length === 0) {
        const row = document.createElement('div');
        row.className = 'tr';
        row.innerHTML = '<div class="td" style="flex: 7; text-align: center; color: #666;">No members found</div>';
        tableBody.appendChild(row);
        return;
    }
    
    members.forEach(member => {
        const row = document.createElement('div');
        row.className = 'tr';
        row.onclick = function() { selectMember(member); };
        
        const statusClass = getStatusClass(member.status);
        const healthClass = getHealthClass(member.health_score);
        
        row.innerHTML = `
            <div class="td">${member.name || 'Unknown'}</div>
            <div class="td">${member.type || 'Unknown'}</div>
            <div class="td ${statusClass}">${member.status || 'Unknown'}</div>
            <div class="td ${healthClass}">${Math.round(member.health_score || 0)}</div>
            <div class="td">${Math.round(member.latency || 0)}</div>
            <div class="td">${(member.packet_loss || 0).toFixed(2)}</div>
            <div class="td">${formatTimestamp(member.last_update)}</div>
        `;
        
        tableBody.appendChild(row);
    });
}

// Get status CSS class
function getStatusClass(status) {
    switch(status) {
        case 'active': return 'status-active';
        case 'inactive': return 'status-inactive';
        default: return 'status-unknown';
    }
}

// Get health CSS class
function getHealthClass(score) {
    if (score >= 80) return 'health-excellent';
    if (score >= 60) return 'health-good';
    if (score >= 40) return 'health-fair';
    return 'health-poor';
}

// Format timestamp
function formatTimestamp(timestamp) {
    if (!timestamp) return 'Never';
    const date = new Date(timestamp);
    return date.toLocaleTimeString();
}

// Select member for details
function selectMember(member) {
    selectedMember = member;
    
    // Update table selection
    const rows = document.querySelectorAll('#members-table-body .tr');
    rows.forEach(row => row.classList.remove('selected-member'));
    event.currentTarget.classList.add('selected-member');
    
    // Update details
    updateMemberDetails(member);
}

// Update member details
function updateMemberDetails(member) {
    document.getElementById('detail-name').textContent = member.name || 'Unknown';
    document.getElementById('detail-type').textContent = member.type || 'Unknown';
    document.getElementById('detail-ip').textContent = member.ip_address || 'N/A';
    document.getElementById('detail-gateway').textContent = member.gateway || 'N/A';
    document.getElementById('detail-uptime').textContent = formatUptime(member.uptime);
    document.getElementById('detail-traffic').textContent = formatTraffic(member.traffic);
    document.getElementById('detail-signal').textContent = formatSignal(member.signal_strength);
    document.getElementById('detail-datacap').textContent = formatDataCap(member.data_cap);
}

// Format uptime
function formatUptime(seconds) {
    if (!seconds) return 'N/A';
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    return `${hours}h ${minutes}m`;
}

// Format traffic
function formatTraffic(bytes) {
    if (!bytes) return 'N/A';
    const mb = bytes / (1024 * 1024);
    return `${mb.toFixed(1)} MB`;
}

// Format signal strength
function formatSignal(signal) {
    if (!signal) return 'N/A';
    return `${signal} dBm`;
}

// Format data cap status
function formatDataCap(dataCap) {
    if (!dataCap) return 'N/A';
    if (dataCap.used && dataCap.limit) {
        const used = dataCap.used / (1024 * 1024 * 1024); // Convert to GB
        const limit = dataCap.limit / (1024 * 1024 * 1024);
        return `${used.toFixed(1)}/${limit.toFixed(1)} GB`;
    }
    return 'Unlimited';
}

// Initialize page
document.addEventListener('DOMContentLoaded', function() {
    loadMembers();
    setInterval(loadMembers, 10000); // Refresh every 10 seconds
});
</script>

<%+footer%>
