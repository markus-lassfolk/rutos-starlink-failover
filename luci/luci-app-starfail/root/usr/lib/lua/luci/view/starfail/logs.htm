<%+header%>

<h2><%:Starfail Logs - System Logs%></h2>

<div class="cbi-section">
    <div class="cbi-section-descr"><%:View and manage Starfail system logs.%></div>
    
    <!-- Log Controls -->
    <div class="cbi-section">
        <h3><%:Log Controls%></h3>
        <div class="cbi-section-descr"><%:Control log display and management.%></div>
        
        <div class="log-controls">
            <div class="control-group">
                <label for="log-level-filter"><%:Log Level Filter%>:</label>
                <select id="log-level-filter" class="cbi-input-select">
                    <option value="all"><%:All Levels%></option>
                    <option value="debug"><%:Debug%></option>
                    <option value="info"><%:Info%></option>
                    <option value="warn"><%:Warning%></option>
                    <option value="error"><%:Error%></option>
                </select>
            </div>
            
            <div class="control-group">
                <label for="log-lines"><%:Number of Lines%>:</label>
                <select id="log-lines" class="cbi-input-select">
                    <option value="50">50</option>
                    <option value="100" selected>100</option>
                    <option value="200">200</option>
                    <option value="500">500</option>
                </select>
            </div>
            
            <div class="control-group">
                <input type="button" id="btn-refresh" class="btn cbi-button cbi-button-apply" value="<%:Refresh%>" />
                <input type="button" id="btn-clear" class="btn cbi-button cbi-button-reset" value="<%:Clear Logs%>" />
                <input type="button" id="btn-download" class="btn cbi-button cbi-button-apply" value="<%:Download%>" />
            </div>
        </div>
    </div>
    
    <!-- Log Display -->
    <div class="cbi-section">
        <h3><%:System Logs%></h3>
        <div class="cbi-section-descr"><%:Real-time log output from the Starfail daemon.%></div>
        
        <div class="log-container">
            <div class="log-header">
                <span class="log-title"><%:Starfail Daemon Logs%></span>
                <span class="log-status" id="log-status"><%:Loading...%></span>
            </div>
            <div class="log-content" id="log-content">
                <!-- Logs will be populated by JavaScript -->
            </div>
        </div>
    </div>
    
    <!-- Log Statistics -->
    <div class="cbi-section">
        <h3><%:Log Statistics%></h3>
        <div class="cbi-section-descr"><%:Summary of log activity and levels.%></div>
        
        <div class="log-stats">
            <div class="stat-item">
                <div class="stat-value" id="total-logs">-</div>
                <div class="stat-label"><%:Total Logs%></div>
            </div>
            <div class="stat-item">
                <div class="stat-value" id="debug-logs">-</div>
                <div class="stat-label"><%:Debug%></div>
            </div>
            <div class="stat-item">
                <div class="stat-value" id="info-logs">-</div>
                <div class="stat-label"><%:Info%></div>
            </div>
            <div class="stat-item">
                <div class="stat-value" id="warn-logs">-</div>
                <div class="stat-label"><%:Warnings%></div>
            </div>
            <div class="stat-item">
                <div class="stat-value" id="error-logs">-</div>
                <div class="stat-label"><%:Errors%></div>
            </div>
        </div>
    </div>
</div>

<style>
.log-controls {
    display: flex;
    flex-wrap: wrap;
    gap: 20px;
    align-items: center;
    margin: 20px 0;
    padding: 15px;
    background: #f9f9f9;
    border-radius: 8px;
    border: 1px solid #ddd;
}

.control-group {
    display: flex;
    align-items: center;
    gap: 8px;
}

.control-group label {
    font-weight: bold;
    color: #333;
    min-width: 100px;
}

.log-container {
    border: 1px solid #ddd;
    border-radius: 8px;
    overflow: hidden;
    margin: 20px 0;
}

.log-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 12px 15px;
    background: #f5f5f5;
    border-bottom: 1px solid #ddd;
}

.log-title {
    font-weight: bold;
    color: #333;
}

.log-status {
    font-size: 12px;
    color: #666;
}

.log-content {
    max-height: 500px;
    overflow-y: auto;
    background: #1e1e1e;
    color: #f0f0f0;
    font-family: 'Courier New', monospace;
    font-size: 12px;
    line-height: 1.4;
    padding: 15px;
}

.log-line {
    margin: 2px 0;
    padding: 2px 0;
    border-bottom: 1px solid #333;
}

.log-line:hover {
    background: #2a2a2a;
}

.log-timestamp {
    color: #888;
    margin-right: 10px;
}

.log-level {
    display: inline-block;
    padding: 2px 6px;
    border-radius: 3px;
    font-size: 10px;
    font-weight: bold;
    margin-right: 10px;
    min-width: 50px;
    text-align: center;
}

.log-level.debug {
    background: #2196F3;
    color: white;
}

.log-level.info {
    background: #4CAF50;
    color: white;
}

.log-level.warn {
    background: #ff9800;
    color: white;
}

.log-level.error {
    background: #f44336;
    color: white;
}

.log-message {
    color: #f0f0f0;
}

.log-stats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 15px;
    margin: 20px 0;
}

.stat-item {
    text-align: center;
    padding: 15px;
    background: #f9f9f9;
    border-radius: 8px;
    border: 1px solid #ddd;
}

.stat-value {
    font-size: 20px;
    font-weight: bold;
    color: #2196F3;
    margin-bottom: 5px;
}

.stat-label {
    font-size: 11px;
    color: #666;
    text-transform: uppercase;
}

.auto-scroll {
    position: sticky;
    bottom: 10px;
    right: 10px;
    background: #333;
    color: white;
    border: none;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    cursor: pointer;
    font-size: 16px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.auto-scroll:hover {
    background: #555;
}
</style>

<script type="text/javascript">
let autoScroll = true;
let logData = [];

// Load logs
function loadLogs() {
    const lines = document.getElementById('log-lines').value;
    const level = document.getElementById('log-level-filter').value;
    
    XHR.get('<%=luci.dispatcher.build_url("admin", "network", "starfail", "logs_data")%>', null, function(xhr) {
        if (xhr.status === 200) {
            const data = JSON.parse(xhr.responseText);
            logData = data;
            updateLogDisplay(data, level, lines);
            updateLogStats(data);
        }
    });
}

// Update log display
function updateLogDisplay(logs, levelFilter, maxLines) {
    const logContent = document.getElementById('log-content');
    const logStatus = document.getElementById('log-status');
    
    // Filter logs by level
    let filteredLogs = logs;
    if (levelFilter !== 'all') {
        filteredLogs = logs.filter(log => {
            const logLevel = extractLogLevel(log);
            return logLevel === levelFilter;
        });
    }
    
    // Limit number of lines
    if (maxLines && filteredLogs.length > maxLines) {
        filteredLogs = filteredLogs.slice(-maxLines);
    }
    
    // Update status
    logStatus.textContent = `${filteredLogs.length} log entries (${logs.length} total)`;
    
    // Clear and populate log content
    logContent.innerHTML = '';
    
    if (filteredLogs.length === 0) {
        logContent.innerHTML = '<div class="log-line">No logs available</div>';
        return;
    }
    
    filteredLogs.forEach(log => {
        const logLine = document.createElement('div');
        logLine.className = 'log-line';
        
        const timestamp = extractTimestamp(log);
        const level = extractLogLevel(log);
        const message = extractMessage(log);
        
        logLine.innerHTML = `
            <span class="log-timestamp">${timestamp}</span>
            <span class="log-level ${level}">${level.toUpperCase()}</span>
            <span class="log-message">${escapeHtml(message)}</span>
        `;
        
        logContent.appendChild(logLine);
    });
    
    // Auto-scroll to bottom if enabled
    if (autoScroll) {
        logContent.scrollTop = logContent.scrollHeight;
    }
}

// Update log statistics
function updateLogStats(logs) {
    const stats = {
        total: logs.length,
        debug: 0,
        info: 0,
        warn: 0,
        error: 0
    };
    
    logs.forEach(log => {
        const level = extractLogLevel(log);
        if (stats.hasOwnProperty(level)) {
            stats[level]++;
        }
    });
    
    document.getElementById('total-logs').textContent = stats.total;
    document.getElementById('debug-logs').textContent = stats.debug;
    document.getElementById('info-logs').textContent = stats.info;
    document.getElementById('warn-logs').textContent = stats.warn;
    document.getElementById('error-logs').textContent = stats.error;
}

// Extract timestamp from log line
function extractTimestamp(logLine) {
    // Common log timestamp patterns
    const patterns = [
        /^(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})/, // 2024-01-01 12:00:00
        /^(\w{3} \d{1,2} \d{2}:\d{2}:\d{2})/,     // Jan 1 12:00:00
        /^(\d{1,2}:\d{2}:\d{2})/                   // 12:00:00
    ];
    
    for (const pattern of patterns) {
        const match = logLine.match(pattern);
        if (match) {
            return match[1];
        }
    }
    
    return 'Unknown';
}

// Extract log level from log line
function extractLogLevel(logLine) {
    const levelPatterns = {
        debug: /debug/i,
        info: /info/i,
        warn: /warn/i,
        error: /error/i
    };
    
    for (const [level, pattern] of Object.entries(levelPatterns)) {
        if (pattern.test(logLine)) {
            return level;
        }
    }
    
    return 'info'; // Default to info if no level found
}

// Extract message from log line
function extractMessage(logLine) {
    // Remove timestamp and level, return the rest
    const timestamp = extractTimestamp(logLine);
    const level = extractLogLevel(logLine);
    
    let message = logLine.replace(timestamp, '').trim();
    message = message.replace(new RegExp(level, 'i'), '').trim();
    
    // Remove common prefixes
    message = message.replace(/^\[.*?\]\s*/, ''); // Remove [prefix]
    message = message.replace(/^starfaild:\s*/, ''); // Remove "starfaild:"
    
    return message || logLine;
}

// Escape HTML characters
function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

// Setup controls
function setupControls() {
    // Refresh button
    document.getElementById('btn-refresh').addEventListener('click', function() {
        loadLogs();
    });
    
    // Clear logs button
    document.getElementById('btn-clear').addEventListener('click', function() {
        if (confirm('Are you sure you want to clear the logs?')) {
            // This would typically call a backend endpoint to clear logs
            alert('Log clearing not implemented in this demo');
        }
    });
    
    // Download logs button
    document.getElementById('btn-download').addEventListener('click', function() {
        const logText = logData.join('\n');
        const blob = new Blob([logText], { type: 'text/plain' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'starfail-logs.txt';
        a.click();
        URL.revokeObjectURL(url);
    });
    
    // Filter controls
    document.getElementById('log-level-filter').addEventListener('change', function() {
        const level = this.value;
        const lines = document.getElementById('log-lines').value;
        updateLogDisplay(logData, level, lines);
    });
    
    document.getElementById('log-lines').addEventListener('change', function() {
        const level = document.getElementById('log-level-filter').value;
        const lines = this.value;
        updateLogDisplay(logData, level, lines);
    });
    
    // Auto-scroll toggle
    const logContent = document.getElementById('log-content');
    logContent.addEventListener('scroll', function() {
        const isAtBottom = this.scrollTop + this.clientHeight >= this.scrollHeight - 10;
        autoScroll = isAtBottom;
    });
}

// Initialize page
document.addEventListener('DOMContentLoaded', function() {
    setupControls();
    loadLogs();
    setInterval(loadLogs, 10000); // Refresh every 10 seconds
});
</script>

<%+footer%>
