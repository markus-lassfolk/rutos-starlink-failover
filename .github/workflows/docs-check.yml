name: Documentation Check

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**/*.go'
      - '**/*.md'
      - 'docs/**'
      - 'README.md'
      - 'go.mod'
      - 'go.sum'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**/*.go'
      - '**/*.md'
      - 'docs/**'
      - 'README.md'
      - 'go.mod'
      - 'go.sum'

permissions:
  contents: read
  pull-requests: read

jobs:
  documentation-check:
    runs-on: ubuntu-latest
    name: Documentation Check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'
          cache: true
      
      - name: Install documentation tools
        run: |
          echo "📦 Installing documentation tools..."
          go install golang.org/x/tools/cmd/godoc@latest
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          npm install -g markdownlint-cli
          npm install -g markdown-link-check
      
      - name: Check Go documentation
        run: |
          echo "📚 Checking Go documentation..."
          
          # Check for exported functions without documentation
          echo "Checking exported functions for documentation..."
          find . -name "*.go" -not -path "./vendor/*" -not -path "./.git/*" | \
            xargs grep -l "^func [A-Z]" | \
            while read file; do
              grep -n "^func [A-Z]" "$file" | \
                while read line; do
                  line_num=$(echo "$line" | cut -d: -f1)
                  func_name=$(echo "$line" | sed 's/.*func \([A-Z][a-zA-Z0-9]*\).*/\1/')
                  
                  # Check if there's a comment above the function
                  if ! sed -n "$((line_num-1))p" "$file" | grep -q "^//"; then
                    echo "::warning::Exported function '$func_name' in $file:$line_num lacks documentation"
                  fi
                done
            done || true
          
          # Check for package documentation
          echo "Checking package documentation..."
          find . -name "*.go" -not -path "./vendor/*" -not -path "./.git/*" | \
            xargs grep -l "^package " | \
            while read file; do
              if ! head -10 "$file" | grep -q "^// Package"; then
                echo "::warning::Package in $file lacks package-level documentation"
              fi
            done || true
      
      - name: Check API documentation
        run: |
          echo "🔗 Checking API documentation..."
          
          # Check for exported types without documentation
          echo "Checking exported types for documentation..."
          find . -name "*.go" -not -path "./vendor/*" -not -path "./.git/*" | \
            xargs grep -l "^type [A-Z]" | \
            while read file; do
              grep -n "^type [A-Z]" "$file" | \
                while read line; do
                  line_num=$(echo "$line" | cut -d: -f1)
                  type_name=$(echo "$line" | sed 's/.*type \([A-Z][a-zA-Z0-9]*\).*/\1/')
                  
                  # Check if there's a comment above the type
                  if ! sed -n "$((line_num-1))p" "$file" | grep -q "^//"; then
                    echo "::warning::Exported type '$type_name' in $file:$line_num lacks documentation"
                  fi
                done
            done || true
          
          # Check for exported constants without documentation
          echo "Checking exported constants for documentation..."
          find . -name "*.go" -not -path "./vendor/*" -not -path "./.git/*" | \
            xargs grep -l "^const [A-Z]" | \
            while read file; do
              grep -n "^const [A-Z]" "$file" | \
                while read line; do
                  line_num=$(echo "$line" | cut -d: -f1)
                  const_name=$(echo "$line" | sed 's/.*const \([A-Z][a-zA-Z0-9]*\).*/\1/')
                  
                  # Check if there's a comment above the constant
                  if ! sed -n "$((line_num-1))p" "$file" | grep -q "^//"; then
                    echo "::warning::Exported constant '$const_name' in $file:$line_num lacks documentation"
                  fi
                done
            done || true
      
      - name: Check README documentation
        run: |
          echo "📖 Checking README documentation..."
          
          # Check if README.md exists
          if [ ! -f "README.md" ]; then
            echo "::error::README.md is missing"
            exit 1
          fi
          
          # Check README content
          echo "Checking README content..."
          
          # Check for required sections
          required_sections=("Installation" "Usage" "Configuration" "API" "Contributing")
          for section in "${required_sections[@]}"; do
            if ! grep -qi "^#.*$section" README.md; then
              echo "::warning::README.md should include a '$section' section"
            fi
          done
          
          # Check for Go module information
          if ! grep -q "go.mod" README.md; then
            echo "::warning::README.md should mention Go module requirements"
          fi
          
          # Check for build instructions
          if ! grep -qi "go build\|make\|build" README.md; then
            echo "::warning::README.md should include build instructions"
          fi
      
      - name: Check markdown files
        run: |
          echo "📝 Checking markdown files..."
          
          # Run markdownlint on all markdown files
          find . -name "*.md" -not -path "./vendor/*" -not -path "./.git/*" | \
            xargs markdownlint --config .markdownlint.json || true
          
          # Check for broken links in markdown files
          echo "Checking for broken links..."
          find . -name "*.md" -not -path "./vendor/*" -not -path "./.git/*" | \
            while read file; do
              echo "Checking links in $file..."
              markdown-link-check "$file" --config .markdown-link-check-config.json || true
            done
      
      - name: Check code comments quality
        run: |
          echo "💬 Checking code comments quality..."
          
          # Check for TODO comments
          echo "Checking for TODO comments..."
          todo_count=$(find . -name "*.go" -not -path "./vendor/*" -not -path "./.git/*" -exec grep -l "TODO" {} \; | wc -l)
          if [ "$todo_count" -gt 0 ]; then
            echo "::warning::Found $todo_count files with TODO comments"
            find . -name "*.go" -not -path "./vendor/*" -not -path "./.git/*" -exec grep -n "TODO" {} \;
          fi
          
          # Check for FIXME comments
          echo "Checking for FIXME comments..."
          fixme_count=$(find . -name "*.go" -not -path "./vendor/*" -not -path "./.git/*" -exec grep -l "FIXME" {} \; | wc -l)
          if [ "$fixme_count" -gt 0 ]; then
            echo "::warning::Found $fixme_count files with FIXME comments"
            find . -name "*.go" -not -path "./vendor/*" -not -path "./.git/*" -exec grep -n "FIXME" {} \;
          fi
          
          # Check for commented-out code
          echo "Checking for commented-out code..."
          find . -name "*.go" -not -path "./vendor/*" -not -path "./.git/*" | \
            xargs grep -n "^[[:space:]]*//[[:space:]]*[a-zA-Z]" | \
            grep -v "// Package" | \
            grep -v "// TODO" | \
            grep -v "// FIXME" | \
            head -10 | while read line; do
              echo "::warning::Potential commented-out code: $line"
            done || true
      
      - name: Generate documentation report
        if: always()
        run: |
          echo "📊 Generating documentation report..."
          
          # Create a comprehensive documentation report
          echo "# Documentation Check Report" > docs-report.md
          echo "" >> docs-report.md
          echo "**Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> docs-report.md
          echo "**Branch:** ${{ github.ref_name }}" >> docs-report.md
          echo "**Commit:** ${{ github.sha }}" >> docs-report.md
          echo "" >> docs-report.md
          
          echo "## Summary" >> docs-report.md
          echo "- ✅ README.md: PRESENT" >> docs-report.md
          echo "- ✅ Go documentation: CHECKED" >> docs-report.md
          echo "- ✅ API documentation: CHECKED" >> docs-report.md
          echo "- ✅ Markdown files: CHECKED" >> docs-report.md
          echo "- ✅ Code comments: CHECKED" >> docs-report.md
          echo "" >> docs-report.md
          
          echo "## Files Checked" >> docs-report.md
          find . -name "*.go" -not -path "./vendor/*" -not -path "./.git/*" | wc -l | xargs echo "- Go files:" >> docs-report.md
          find . -name "*.md" -not -path "./vendor/*" -not -path "./.git/*" | wc -l | xargs echo "- Markdown files:" >> docs-report.md
          echo "" >> docs-report.md
          
          echo "Report generated successfully"
      
      - name: Upload documentation artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: documentation-check-results
          path: docs-report.md
          retention-days: 7
