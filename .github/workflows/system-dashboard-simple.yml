name: Autonomous System Status Dashboard

on:
  schedule:
    - cron: "0 */6 * * *"  # Every 6 hours
  workflow_dispatch:
    inputs:
      create_report:
        description: 'Create comprehensive system report'
        type: boolean
        default: true

permissions:
  contents: write
  pull-requests: write
  actions: read
  issues: write

jobs:
  system-dashboard:
    runs-on: ubuntu-latest
    name: System Dashboard
    
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.COPILOT_TOKEN }}
          fetch-depth: 0
          
      - name: Setup Tools
        run: |
          sudo apt-get update && sudo apt-get install -y jq gh
          
      - name: Collect Metrics
        id: metrics
        env:
          GH_TOKEN: ${{ secrets.COPILOT_TOKEN }}
        run: |
          echo "🤖 Autonomous System Status Dashboard"
          
          # PR Analysis
          TOTAL_PRS=$(gh pr list --state open --json number | jq length)
          COPILOT_PRS=$(gh pr list --state open --json number,author --jq '.[] | select(.author.login | test("copilot|github-actions|dependabot")) | .number' | wc -l)
          
          echo "PRs: $TOTAL_PRS total, $COPILOT_PRS automated"
          
          # Workflow Analysis (last 24h)
          WORKFLOW_RUNS=$(gh api repos/${{ github.repository }}/actions/runs --jq '.workflow_runs[] | select(.created_at > (now - 86400 | strftime("%Y-%m-%dT%H:%M:%SZ"))) | .conclusion' | grep -v null || echo "")
          
          TOTAL_RUNS=0
          SUCCESS_RUNS=0
          if [ -n "$WORKFLOW_RUNS" ]; then
            TOTAL_RUNS=$(echo "$WORKFLOW_RUNS" | wc -l)
            SUCCESS_RUNS=$(echo "$WORKFLOW_RUNS" | grep -c "success" || echo 0)
          fi
          
          SUCCESS_RATE=0
          if [ $TOTAL_RUNS -gt 0 ]; then
            SUCCESS_RATE=$(( (SUCCESS_RUNS * 100) / TOTAL_RUNS ))
          fi
          
          echo "Workflows: $SUCCESS_RATE% success rate ($SUCCESS_RUNS/$TOTAL_RUNS)"
          
          # Issue Analysis
          TOTAL_ISSUES=$(gh issue list --state open --json number | jq length)
          STALE_ISSUES=$(gh issue list --state open --json number,createdAt --jq ".[] | select(.createdAt < (now - (30 * 86400) | strftime(\"%Y-%m-%dT%H:%M:%SZ\"))) | .number" | wc -l)
          
          echo "Issues: $TOTAL_ISSUES open, $STALE_ISSUES stale"
          
          # Health Score Calculation
          HEALTH_SCORE=100
          
          if [ $SUCCESS_RATE -lt 80 ]; then
            PENALTY=$((80 - SUCCESS_RATE))
            HEALTH_SCORE=$((HEALTH_SCORE - PENALTY))
          fi
          
          if [ $STALE_ISSUES -gt 5 ]; then
            PENALTY=$((STALE_ISSUES * 2))
            if [ $PENALTY -gt 20 ]; then PENALTY=20; fi
            HEALTH_SCORE=$((HEALTH_SCORE - PENALTY))
          fi
          
          if [ $TOTAL_PRS -gt 10 ]; then
            PENALTY=$(((TOTAL_PRS - 10) * 2))
            if [ $PENALTY -gt 20 ]; then PENALTY=20; fi
            HEALTH_SCORE=$((HEALTH_SCORE - PENALTY))
          fi
          
          if [ $HEALTH_SCORE -lt 0 ]; then HEALTH_SCORE=0; fi
          
          # Health Status
          if [ $HEALTH_SCORE -ge 90 ]; then
            HEALTH_STATUS="EXCELLENT"
            HEALTH_EMOJI="🟢"
          elif [ $HEALTH_SCORE -ge 75 ]; then
            HEALTH_STATUS="GOOD"
            HEALTH_EMOJI="🟡"
          elif [ $HEALTH_SCORE -ge 50 ]; then
            HEALTH_STATUS="FAIR"
            HEALTH_EMOJI="🟠"
          else
            HEALTH_STATUS="POOR"
            HEALTH_EMOJI="🔴"
          fi
          
          echo "Health: $HEALTH_EMOJI $HEALTH_STATUS ($HEALTH_SCORE/100)"
          
          # Set outputs
          {
            echo "total-prs=$TOTAL_PRS"
            echo "copilot-prs=$COPILOT_PRS"
            echo "success-rate=$SUCCESS_RATE"
            echo "total-issues=$TOTAL_ISSUES"
            echo "stale-issues=$STALE_ISSUES"
            echo "health-score=$HEALTH_SCORE"
            echo "health-status=$HEALTH_STATUS"
            echo "health-emoji=$HEALTH_EMOJI"
          } >> $GITHUB_OUTPUT
          
      - name: Create Report
        if: inputs.create_report == true || github.event_name == 'schedule'
        run: |
          echo "📝 Generating system report"
          
          cat > AUTONOMOUS_SYSTEM_STATUS.md << 'EOL'
# 🤖 Autonomous System Status Report

**Health:** ${{ steps.metrics.outputs.health-emoji }} ${{ steps.metrics.outputs.health-status }} (${{ steps.metrics.outputs.health-score }}/100)

## System Metrics

- **Open PRs:** ${{ steps.metrics.outputs.total-prs }} (Automated: ${{ steps.metrics.outputs.copilot-prs }})
- **Workflow Success Rate:** ${{ steps.metrics.outputs.success-rate }}%
- **Open Issues:** ${{ steps.metrics.outputs.total-issues }} (Stale: ${{ steps.metrics.outputs.stale-issues }})

## Autonomous Features

✅ Ultimate Autonomous Orchestrator  
✅ Advanced Quality Gate  
✅ Smart Auto-Fix Engine  
✅ Documentation Validation  
✅ Intelligent Merge Engine  
✅ Conflict Resolution Engine  

## Recommendations

EOL
          
          # Add recommendations
          if [ ${{ steps.metrics.outputs.health-score }} -lt 80 ]; then
            echo "- 🔧 System attention needed - Health score below optimal" >> AUTONOMOUS_SYSTEM_STATUS.md
          fi
          
          if [ ${{ steps.metrics.outputs.success-rate }} -lt 80 ]; then
            echo "- ⚠️ Review workflow failures" >> AUTONOMOUS_SYSTEM_STATUS.md
          fi
          
          if [ ${{ steps.metrics.outputs.stale-issues }} -gt 10 ]; then
            echo "- 📋 Clean up stale issues" >> AUTONOMOUS_SYSTEM_STATUS.md
          fi
          
          if [ ${{ steps.metrics.outputs.health-score }} -ge 90 ]; then
            echo "- 🎉 System running optimally!" >> AUTONOMOUS_SYSTEM_STATUS.md
          fi
          
          echo "" >> AUTONOMOUS_SYSTEM_STATUS.md
          echo "_Generated: $(date -u)_" >> AUTONOMOUS_SYSTEM_STATUS.md
          
      - name: Commit Report
        if: inputs.create_report == true || github.event_name == 'schedule'
        run: |
          if [ -f "AUTONOMOUS_SYSTEM_STATUS.md" ]; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add AUTONOMOUS_SYSTEM_STATUS.md
            git commit -m "🤖 Update System Status - Health: ${{ steps.metrics.outputs.health-score }}/100 [skip ci]" || echo "No changes"
            git push || echo "Push failed"
          fi
          
      - name: Health Alert
        if: steps.metrics.outputs.health-score < 75
        env:
          GH_TOKEN: ${{ secrets.COPILOT_TOKEN }}
        run: |
          echo "🚨 Creating health alert"
          
          # Check for existing alert
          EXISTING=$(gh issue list --state open --search "System Health Alert" --json number --jq '.[0].number // empty')
          
          ALERT_MSG="🤖 **Autonomous System Health Alert**

Current Status: ${{ steps.metrics.outputs.health-emoji }} ${{ steps.metrics.outputs.health-status }} (${{ steps.metrics.outputs.health-score }}/100)

**System Metrics:**
- Open PRs: ${{ steps.metrics.outputs.total-prs }} (Automated: ${{ steps.metrics.outputs.copilot-prs }})
- Workflow Success: ${{ steps.metrics.outputs.success-rate }}%
- Open Issues: ${{ steps.metrics.outputs.total-issues }} (Stale: ${{ steps.metrics.outputs.stale-issues }})

**Action Required:** System health is below 75%. Please review recent workflow failures and address any issues.

_Auto-generated by Autonomous System Dashboard_"
          
          if [ -n "$EXISTING" ]; then
            gh issue comment $EXISTING --body "$ALERT_MSG"
            echo "Updated existing alert #$EXISTING"
          else
            gh issue create --title "🚨 System Health Alert - ${{ steps.metrics.outputs.health-status }}" --body "$ALERT_MSG" --label "automated,health-alert"
            echo "Created new health alert"
          fi
          
      - name: Summary
        if: always()
        run: |
          echo "🤖 Dashboard Summary"
          echo "==================="
          echo "Health: ${{ steps.metrics.outputs.health-emoji }} ${{ steps.metrics.outputs.health-status }} (${{ steps.metrics.outputs.health-score }}/100)"
          echo "PRs: ${{ steps.metrics.outputs.total-prs }} (${{ steps.metrics.outputs.copilot-prs }} automated)"
          echo "Success Rate: ${{ steps.metrics.outputs.success-rate }}%"
          echo "Issues: ${{ steps.metrics.outputs.total-issues }} (${{ steps.metrics.outputs.stale-issues }} stale)"
          echo ""
          echo "🔄 Next check in 6 hours"
