name: Ultimate Autonomous Orchestrator

on:
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]
  workflow_run:
    workflows: ["Advanced Quality Gate", "Smart Auto-Fix Engine", "Documentation Validation & Auto-Fix"]
    types: [completed]
  schedule:
    - cron: "*/15 * * * *"
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to process'
        type: number
      action:
        description: 'Action to perform'
        type: choice
        options:
          - 'full-validation'
          - 'auto-merge'
          - 'conflict-resolution'
        default: 'full-validation'

permissions:
  contents: write
  pull-requests: write
  actions: write
  checks: write

jobs:
  orchestrate:
    runs-on: ubuntu-latest
    name: Autonomous Orchestrator
    
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.COPILOT_TOKEN }}
          fetch-depth: 0
          
      - name: Setup
        run: |
          sudo apt-get update && sudo apt-get install -y jq gh
          
      - name: Discover & Analyze PR
        id: analyze
        env:
          GH_TOKEN: ${{ secrets.COPILOT_TOKEN }}
        run: |
          echo "🤖 Autonomous Orchestrator Analysis"
          
          # Determine target PR
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            PR_NUMBER="${{ github.event.number }}"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ inputs.pr_number }}" ]; then
            PR_NUMBER="${{ inputs.pr_number }}"
          elif [ "${{ github.event_name }}" = "workflow_run" ]; then
            PR_NUMBER=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}/pull_requests --jq '.[0].number')
          else
            # Scheduled - find Copilot PRs needing attention
            PR_NUMBER=$(gh pr list --state open --json number,author,isDraft --jq '.[] | select(.author.login | test("copilot")) | select(.isDraft == false) | .number' | head -1)
          fi
          
          if [ -z "$PR_NUMBER" ] || [ "$PR_NUMBER" = "null" ]; then
            echo "No PR to process"
            exit 0
          fi
          
          echo "Processing PR #$PR_NUMBER"
          
          # Get PR info
          PR_INFO=$(gh api repos/${{ github.repository }}/pulls/$PR_NUMBER)
          PR_AUTHOR=$(echo "$PR_INFO" | jq -r '.user.login')
          PR_MERGEABLE=$(echo "$PR_INFO" | jq -r '.mergeable')
          PR_MERGEABLE_STATE=$(echo "$PR_INFO" | jq -r '.mergeable_state')
          
          # Check if Copilot PR
          IS_COPILOT_PR=false
          if echo "$PR_AUTHOR" | grep -q "copilot"; then
            IS_COPILOT_PR=true
          fi
          
          # Get check status
          SHA=$(echo "$PR_INFO" | jq -r '.head.sha')
          CHECK_RUNS=$(gh api repos/${{ github.repository }}/commits/$SHA/check-runs)
          FAILING_CHECKS=$(echo "$CHECK_RUNS" | jq -r '.check_runs[] | select(.conclusion == "failure") | .name' | wc -l)
          PENDING_CHECKS=$(echo "$CHECK_RUNS" | jq -r '.check_runs[] | select(.status == "in_progress" or .status == "queued") | .name' | wc -l)
          PASSING_CHECKS=$(echo "$CHECK_RUNS" | jq -r '.check_runs[] | select(.conclusion == "success") | .name' | wc -l)
          
          # Get review status
          REVIEWS=$(gh api repos/${{ github.repository }}/pulls/$PR_NUMBER/reviews)
          APPROVED_REVIEWS=$(echo "$REVIEWS" | jq '[.[] | select(.state == "APPROVED")] | length')
          
          echo "Status - Passing: $PASSING_CHECKS, Failing: $FAILING_CHECKS, Pending: $PENDING_CHECKS"
          echo "Reviews - Approved: $APPROVED_REVIEWS"
          echo "Mergeable: $PR_MERGEABLE ($PR_MERGEABLE_STATE)"
          
          # Set outputs
          {
            echo "pr-number=$PR_NUMBER"
            echo "is-copilot-pr=$IS_COPILOT_PR"
            echo "failing-checks=$FAILING_CHECKS"
            echo "pending-checks=$PENDING_CHECKS" 
            echo "passing-checks=$PASSING_CHECKS"
            echo "approved-reviews=$APPROVED_REVIEWS"
            echo "mergeable=$PR_MERGEABLE"
            echo "mergeable-state=$PR_MERGEABLE_STATE"
          } >> $GITHUB_OUTPUT
          
      - name: Auto-Merge Logic
        if: steps.analyze.outputs.is-copilot-pr == 'true' && steps.analyze.outputs.failing-checks == '0' && steps.analyze.outputs.approved-reviews > '0' && steps.analyze.outputs.mergeable == 'true'
        env:
          GH_TOKEN: ${{ secrets.COPILOT_TOKEN }}
        run: |
          PR_NUMBER="${{ steps.analyze.outputs.pr-number }}"
          echo "✅ Auto-merging PR #$PR_NUMBER - all conditions met"
          
          if gh pr merge $PR_NUMBER --auto --squash --delete-branch; then
            echo "🎉 Auto-merge successful"
            gh pr comment $PR_NUMBER --body "🤖 **Autonomous Auto-Merge** - This PR has been automatically merged after passing all quality gates! 🎉"
          else
            echo "❌ Auto-merge failed"
          fi
          
      - name: Fix Failing Checks
        if: steps.analyze.outputs.is-copilot-pr == 'true' && steps.analyze.outputs.failing-checks > '0'
        env:
          GH_TOKEN: ${{ secrets.COPILOT_TOKEN }}
        run: |
          PR_NUMBER="${{ steps.analyze.outputs.pr-number }}"
          echo "🔧 Triggering auto-fix for failing checks on PR #$PR_NUMBER"
          
          # Trigger fix workflows
          gh workflow run "Smart Auto-Fix Engine" --field pr_number="$PR_NUMBER" --field fix_types="all" || true
          gh workflow run "Documentation Validation & Auto-Fix" --field pr_number="$PR_NUMBER" || true
          
          gh pr comment $PR_NUMBER --body "🤖 **Auto-Fix Triggered** - Detected failing checks. Auto-fix workflows have been initiated to resolve issues automatically."
          
      - name: Request Reviews
        if: steps.analyze.outputs.is-copilot-pr == 'true' && steps.analyze.outputs.failing-checks == '0' && steps.analyze.outputs.approved-reviews == '0'
        env:
          GH_TOKEN: ${{ secrets.COPILOT_TOKEN }}
        run: |
          PR_NUMBER="${{ steps.analyze.outputs.pr-number }}"
          echo "👥 Requesting reviews for ready PR #$PR_NUMBER"
          
          # Get maintainers and request reviews
          MAINTAINERS=$(gh api repos/${{ github.repository }}/collaborators --jq '.[].login' | grep -v "app\|bot" | head -2)
          for maintainer in $MAINTAINERS; do
            gh pr edit $PR_NUMBER --add-reviewer "$maintainer" || true
          done
          
          # Mark as ready if draft
          gh pr ready $PR_NUMBER || true
          
          gh pr comment $PR_NUMBER --body "🤖 **Ready for Review** - All automated quality checks passed! Requesting review from maintainers."
          
      - name: Resolve Conflicts
        if: steps.analyze.outputs.is-copilot-pr == 'true' && (steps.analyze.outputs.mergeable == 'false' || steps.analyze.outputs.mergeable-state == 'dirty')
        env:
          GH_TOKEN: ${{ secrets.COPILOT_TOKEN }}
        run: |
          PR_NUMBER="${{ steps.analyze.outputs.pr-number }}"
          echo "🔧 Attempting to resolve conflicts for PR #$PR_NUMBER"
          
          gh pr checkout $PR_NUMBER
          git fetch origin main
          
          if git merge origin/main --no-commit --no-ff; then
            git add -A
            git commit -m "Auto-resolve conflicts for PR #$PR_NUMBER [skip ci]"
            git push origin HEAD
            gh pr comment $PR_NUMBER --body "🤖 **Conflicts Resolved** - Merge conflicts have been automatically resolved!"
          else
            git merge --abort
            gh pr comment $PR_NUMBER --body "🤖 **Manual Intervention Needed** - Unable to automatically resolve conflicts. Please resolve manually."
          fi
          
      - name: Summary
        if: always()
        run: |
          echo "📊 Orchestrator Summary"
          echo "PR: #${{ steps.analyze.outputs.pr-number }}"
          echo "Copilot PR: ${{ steps.analyze.outputs.is-copilot-pr }}"
          echo "Status: Passing=${{ steps.analyze.outputs.passing-checks }}, Failing=${{ steps.analyze.outputs.failing-checks }}"
          echo "🔄 Next check in 15 minutes"
