name: Go Build and Test

on:
  push:
    branches: [ main, go-core, go-core-claude ]
    paths:
      - '**.go'
      - 'go.mod'
      - 'go.sum'
      - 'cmd/**'
      - 'pkg/**'
      - '.github/workflows/go-build.yml'
  pull_request:
    branches: [ main ]
    paths:
      - '**.go'
      - 'go.mod'
      - 'go.sum'
      - 'cmd/**'
      - 'pkg/**'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'

    - name: Go mod tidy
      run: go mod tidy

    - name: Go fmt
      run: |
        if [ -n "$(gofmt -l .)" ]; then
          echo "Go code is not formatted:"
          gofmt -d .
          exit 1
        fi

    - name: Go vet
      run: go vet ./...

    - name: Run tests
      run: go test -v ./...

  build:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: arm
            goarm: 7
            name: rutos-armv7
          - goos: linux
            goarch: mips
            gomips: softfloat
            name: openwrt-mips
          - goos: linux
            goarch: amd64
            name: linux-amd64
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'

    - name: Build starfaild
      env:
        CGO_ENABLED: 0
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        GOARM: ${{ matrix.goarm }}
        GOMIPS: ${{ matrix.gomips }}
      run: |
        mkdir -p dist
        go build -ldflags "-s -w -X main.version=$(git describe --tags --always --dirty)" \
                 -o dist/starfaild-${{ matrix.name }} ./cmd/starfaild

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: starfaild-${{ matrix.name }}
        path: dist/starfaild-${{ matrix.name }}

  size-check:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: starfaild-rutos-armv7

    - name: Check binary size
      run: |
        size=$(stat -c%s starfaild-rutos-armv7)
        size_mb=$((size / 1024 / 1024))
        echo "Binary size: ${size_mb}MB (${size} bytes)"
        
        # Check against 12MB limit from PROJECT_INSTRUCTION.md
        if [ $size -gt 12582912 ]; then
          echo "❌ Binary size exceeds 12MB limit!"
          exit 1
        else
          echo "✅ Binary size within 12MB limit"
        fi
