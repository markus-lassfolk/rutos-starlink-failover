name: Ultimate Autonomous Orchestrator

on:
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review, review_requested]
  workflow_run:
    workflows: 
      - "Advanced Quality Gate"
      - "Smart Auto-Fix Engine"
      - "Documentation Validation & Auto-Fix"
      - "RUTOS Pre-Review Validation"
    types: [completed]
  schedule:
    - cron: "*/15 * * * *"  # Every 15 minutes
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to process'
        required: false
        type: number
      action:
        description: 'Action to perform'
        required: false
        type: choice
        options:
          - 'full-validation'
          - 'auto-merge'
          - 'conflict-resolution'
          - 'quality-check'
        default: 'full-validation'

permissions:
  contents: write
  pull-requests: write
  actions: write
  checks: write
  statuses: write

jobs:
  orchestrate:
    runs-on: ubuntu-latest
    name: Ultimate Autonomous Orchestrator
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.COPILOT_TOKEN }}
          fetch-depth: 0
          
      - name: Setup Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y jq gh
          
      - name: Intelligent PR Discovery & Analysis
        id: discovery
        env:
          GH_TOKEN: ${{ secrets.COPILOT_TOKEN }}
        run: |
          echo "🤖 Ultimate Autonomous Orchestrator - Intelligent Analysis"
          echo "========================================================"
          
          # Determine target PR
          PR_NUMBER=""
          
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            PR_NUMBER="${{ github.event.number }}"
            TRIGGER_TYPE="pr_event"
          elif [ "${{ github.event_name }}" = "workflow_run" ]; then
            # Extract PR from workflow run
            PR_NUMBER=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}/pull_requests --jq '.[0].number')
            TRIGGER_TYPE="workflow_completion"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ inputs.pr_number }}" ]; then
            PR_NUMBER="${{ inputs.pr_number }}"
            TRIGGER_TYPE="manual"
          else
            # Scheduled run - find active PRs that need attention
            TRIGGER_TYPE="scheduled"
            
            echo "🔍 Scheduled scan for PRs needing autonomous attention..."
            
            # Find Copilot PRs that are ready for review or have been updated
            ACTIVE_PRS=$(gh pr list --state open --json number,author,title,isDraft,updatedAt --jq '
              .[] | select(
                (.author.login | test("copilot|github-copilot|app/github-copilot|app/copilot-swe-agent|swe-agent")) or
                (.title | test("copilot|Fix|automated|compatibility"; "i"))
              ) | select(.isDraft == false) | .number
            ')
            
            if [ -n "$ACTIVE_PRS" ]; then
              PR_NUMBER=$(echo "$ACTIVE_PRS" | head -1)
              echo "📋 Found active PR for autonomous processing: #$PR_NUMBER"
            else
              echo "ℹ️ No PRs requiring autonomous attention found"
              exit 0
            fi
          fi
          
          if [ -z "$PR_NUMBER" ] || [ "$PR_NUMBER" = "null" ]; then
            echo "❌ No PR number available for processing"
            exit 1
          fi
          
          echo "🎯 Target PR: #$PR_NUMBER"
          echo "🔄 Trigger: $TRIGGER_TYPE"
          
          # Get comprehensive PR information
          PR_INFO=$(gh api repos/${{ github.repository }}/pulls/$PR_NUMBER)
          PR_TITLE=$(echo "$PR_INFO" | jq -r '.title')
          PR_AUTHOR=$(echo "$PR_INFO" | jq -r '.user.login')
          PR_STATE=$(echo "$PR_INFO" | jq -r '.state')
          PR_DRAFT=$(echo "$PR_INFO" | jq -r '.draft')
          PR_MERGEABLE=$(echo "$PR_INFO" | jq -r '.mergeable')
          PR_MERGEABLE_STATE=$(echo "$PR_INFO" | jq -r '.mergeable_state')
          
          echo "📊 PR Analysis:"
          echo "   Title: $PR_TITLE"
          echo "   Author: $PR_AUTHOR"
          echo "   State: $PR_STATE"
          echo "   Draft: $PR_DRAFT"
          echo "   Mergeable: $PR_MERGEABLE"
          echo "   Mergeable State: $PR_MERGEABLE_STATE"
          
          # Determine if this is a Copilot-managed PR
          IS_COPILOT_PR=false
          if echo "$PR_AUTHOR" | grep -q "copilot\|github-copilot\|app/github-copilot\|app/copilot-swe-agent\|swe-agent" || \
             echo "$PR_TITLE" | grep -qi "copilot\|Fix\|automated\|compatibility"; then
            IS_COPILOT_PR=true
            echo "✅ Confirmed: Copilot-managed PR"
          fi
          
          # Set outputs
          echo "pr-number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "pr-title=$PR_TITLE" >> $GITHUB_OUTPUT
          echo "pr-author=$PR_AUTHOR" >> $GITHUB_OUTPUT
          echo "pr-state=$PR_STATE" >> $GITHUB_OUTPUT
          echo "pr-draft=$PR_DRAFT" >> $GITHUB_OUTPUT
          echo "pr-mergeable=$PR_MERGEABLE" >> $GITHUB_OUTPUT
          echo "pr-mergeable-state=$PR_MERGEABLE_STATE" >> $GITHUB_OUTPUT
          echo "is-copilot-pr=$IS_COPILOT_PR" >> $GITHUB_OUTPUT
          echo "trigger-type=$TRIGGER_TYPE" >> $GITHUB_OUTPUT
          
      - name: Quality Assessment & Decision Engine
        id: decision
        env:
          GH_TOKEN: ${{ secrets.COPILOT_TOKEN }}
        run: |
          echo "🧠 Intelligent Decision Engine"
          echo "=============================="
          
          PR_NUMBER="${{ steps.discovery.outputs.pr-number }}"
          IS_COPILOT_PR="${{ steps.discovery.outputs.is-copilot-pr }}"
          MERGEABLE_STATE="${{ steps.discovery.outputs.pr-mergeable-state }}"
          
          # Get latest check runs for this PR
          CHECK_RUNS=$(gh api repos/${{ github.repository }}/commits/$(gh api repos/${{ github.repository }}/pulls/$PR_NUMBER --jq '.head.sha')/check-runs)
          
          # Analyze check status
          FAILING_CHECKS=$(echo "$CHECK_RUNS" | jq -r '.check_runs[] | select(.conclusion == "failure") | .name' | wc -l)
          PENDING_CHECKS=$(echo "$CHECK_RUNS" | jq -r '.check_runs[] | select(.status == "in_progress" or .status == "queued") | .name' | wc -l)
          PASSING_CHECKS=$(echo "$CHECK_RUNS" | jq -r '.check_runs[] | select(.conclusion == "success") | .name' | wc -l)
          
          echo "📊 Check Status:"
          echo "   Passing: $PASSING_CHECKS"
          echo "   Failing: $FAILING_CHECKS" 
          echo "   Pending: $PENDING_CHECKS"
          
          # Check if PR has conflicts
          HAS_CONFLICTS=false
          if [ "$MERGEABLE_STATE" = "dirty" ] || [ "${{ steps.discovery.outputs.pr-mergeable }}" = "false" ]; then
            HAS_CONFLICTS=true
          fi
          
          # Get PR reviews
          REVIEWS=$(gh api repos/${{ github.repository }}/pulls/$PR_NUMBER/reviews)
          APPROVED_REVIEWS=$(echo "$REVIEWS" | jq '[.[] | select(.state == "APPROVED")] | length')
          REQUESTED_CHANGES=$(echo "$REVIEWS" | jq '[.[] | select(.state == "CHANGES_REQUESTED")] | length')
          
          echo "📋 Review Status:"
          echo "   Approved: $APPROVED_REVIEWS"
          echo "   Changes Requested: $REQUESTED_CHANGES"
          
          # Decision logic
          RECOMMENDED_ACTION="none"
          
          if [ "$IS_COPILOT_PR" = "true" ]; then
            if [ "$HAS_CONFLICTS" = "true" ]; then
              RECOMMENDED_ACTION="resolve-conflicts"
            elif [ $FAILING_CHECKS -gt 0 ]; then
              RECOMMENDED_ACTION="fix-failing-checks"
            elif [ $PENDING_CHECKS -gt 0 ]; then
              RECOMMENDED_ACTION="wait-for-checks"
            elif [ $REQUESTED_CHANGES -gt 0 ]; then
              RECOMMENDED_ACTION="address-review-feedback"
            elif [ $PASSING_CHECKS -gt 0 ] && [ $APPROVED_REVIEWS -gt 0 ]; then
              RECOMMENDED_ACTION="auto-merge"
            elif [ $PASSING_CHECKS -gt 0 ]; then
              RECOMMENDED_ACTION="request-review"
            else
              RECOMMENDED_ACTION="run-quality-checks"
            fi
          else
            # Non-Copilot PR - limited autonomous actions
            if [ $FAILING_CHECKS -gt 0 ]; then
              RECOMMENDED_ACTION="notify-failures"
            elif [ $PENDING_CHECKS -eq 0 ] && [ $PASSING_CHECKS -gt 0 ]; then
              RECOMMENDED_ACTION="notify-ready"
            fi
          fi
          
          echo "🎯 Recommended Action: $RECOMMENDED_ACTION"
          
          # Set outputs
          echo "action=$RECOMMENDED_ACTION" >> $GITHUB_OUTPUT
          echo "has-conflicts=$HAS_CONFLICTS" >> $GITHUB_OUTPUT
          echo "failing-checks=$FAILING_CHECKS" >> $GITHUB_OUTPUT
          echo "pending-checks=$PENDING_CHECKS" >> $GITHUB_OUTPUT
          echo "passing-checks=$PASSING_CHECKS" >> $GITHUB_OUTPUT
          echo "approved-reviews=$APPROVED_REVIEWS" >> $GITHUB_OUTPUT
          echo "requested-changes=$REQUESTED_CHANGES" >> $GITHUB_OUTPUT
          
      - name: Execute Action - Resolve Conflicts
        if: steps.decision.outputs.action == 'resolve-conflicts'
        env:
          GH_TOKEN: ${{ secrets.COPILOT_TOKEN }}
        run: |
          echo "🔧 Autonomous Conflict Resolution"
          echo "================================"
          
          PR_NUMBER="${{ steps.discovery.outputs.pr-number }}"
          
          # Fetch the PR branch
          gh pr checkout $PR_NUMBER
          
          # Attempt automatic merge resolution
          echo "Attempting to resolve merge conflicts..."
          git fetch origin main
          
          if git merge origin/main --no-commit --no-ff; then
            echo "✅ Conflicts resolved automatically"
            git add -A
            git commit -m "Auto-resolve merge conflicts for PR #$PR_NUMBER [skip ci]"
            git push origin HEAD
            
            # Comment on PR
            gh pr comment $PR_NUMBER --body "🤖 **Autonomous Conflict Resolution** - Merge conflicts have been automatically resolved! The PR is now ready for continued validation."
          else
            echo "❌ Cannot automatically resolve conflicts"
            git merge --abort
            
            # Get conflicted files
            CONFLICTS=$(git status --porcelain | grep '^UU' | cut -c4- | tr '\n' ' ')
            
            # Request manual intervention
            gh pr comment $PR_NUMBER --body "🤖 **Autonomous Conflict Resolution** - Unable to automatically resolve merge conflicts. Manual intervention required. Conflicts in: $CONFLICTS"
            
            # Assign to original author or maintainers
            gh pr edit $PR_NUMBER --add-assignee "${{ steps.discovery.outputs.pr-author }}"
          fi
          
      - name: Execute Action - Fix Failing Checks
        if: steps.decision.outputs.action == 'fix-failing-checks'
        env:
          GH_TOKEN: ${{ secrets.COPILOT_TOKEN }}
        run: |
          echo "🔧 Autonomous Check Failure Resolution"
          echo "====================================="
          
          PR_NUMBER="${{ steps.discovery.outputs.pr-number }}"
          
          # Get failing check details
          CHECK_RUNS=$(gh api repos/${{ github.repository }}/commits/$(gh api repos/${{ github.repository }}/pulls/$PR_NUMBER --jq '.head.sha')/check-runs)
          FAILING_CHECKS=$(echo "$CHECK_RUNS" | jq -r '.check_runs[] | select(.conclusion == "failure") | .name')
          
          echo "🔍 Failing checks:"
          echo "$FAILING_CHECKS"
          
          # Trigger appropriate fix workflows based on failing check types
          if echo "$FAILING_CHECKS" | grep -qi "security"; then
            echo "🔐 Triggering security fix workflow..."
            gh workflow run "Smart Auto-Fix Engine" --field pr_number="$PR_NUMBER" --field fix_types="permissions"
          fi
          
          if echo "$FAILING_CHECKS" | grep -qi "shellcheck\|format"; then
            echo "📝 Triggering shell script fix workflow..."
            gh workflow run "Smart Auto-Fix Engine" --field pr_number="$PR_NUMBER" --field fix_types="format"
          fi
          
          if echo "$FAILING_CHECKS" | grep -qi "documentation\|markdown"; then
            echo "📚 Triggering documentation fix workflow..."
            gh workflow run "Documentation Validation & Auto-Fix" --field pr_number="$PR_NUMBER"
          fi
          
          # Comment on PR about initiated fixes
          gh pr comment $PR_NUMBER --body "🤖 **Autonomous Fix Engine Activated**

Detected failing checks and initiated automated fixes:
$FAILING_CHECKS

Auto-fix workflows have been triggered. The PR will be re-evaluated once fixes are applied."
          
      - name: Execute Action - Auto-Merge
        if: steps.decision.outputs.action == 'auto-merge'
        env:
          GH_TOKEN: ${{ secrets.COPILOT_TOKEN }}
        run: |
          echo "🚀 Autonomous Auto-Merge"
          echo "========================"
          
          PR_NUMBER="${{ steps.discovery.outputs.pr-number }}"
          PR_TITLE="${{ steps.discovery.outputs.pr-title }}"
          
          # Final safety checks
          echo "🔍 Performing final safety checks..."
          
          # Verify all checks are still passing
          CHECK_RUNS=$(gh api repos/${{ github.repository }}/commits/$(gh api repos/${{ github.repository }}/pulls/$PR_NUMBER --jq '.head.sha')/check-runs)
          CURRENT_FAILING=$(echo "$CHECK_RUNS" | jq -r '.check_runs[] | select(.conclusion == "failure") | .name' | wc -l)
          
          if [ $CURRENT_FAILING -gt 0 ]; then
            echo "❌ Cannot auto-merge: checks are failing"
            exit 1
          fi
          
          # Verify no conflicts
          PR_INFO=$(gh api repos/${{ github.repository }}/pulls/$PR_NUMBER)
          MERGEABLE=$(echo "$PR_INFO" | jq -r '.mergeable')
          
          if [ "$MERGEABLE" != "true" ]; then
            echo "❌ Cannot auto-merge: PR is not mergeable"
            exit 1
          fi
          
          # Perform the merge
          echo "✅ All safety checks passed. Performing auto-merge..."
          
          if gh pr merge $PR_NUMBER --auto --squash --delete-branch; then
            echo "🎉 Auto-merge successful!"
            
            # Comment on the merged PR
            gh pr comment $PR_NUMBER --body "🤖 **Autonomous Auto-Merge Complete**

✅ This PR has been automatically merged after passing all quality gates:

- ✅ All checks passing
- ✅ No merge conflicts  
- ✅ Quality standards met
- ✅ Approved by reviewers

Thank you for the contribution! 🎉"
            
            # Close any related issues if mentioned in PR title/body
            if echo "$PR_TITLE" | grep -oE '#[0-9]+'; then
              ISSUE_NUMBERS=$(echo "$PR_TITLE" | grep -oE '#[0-9]+' | tr -d '#')
              for issue in $ISSUE_NUMBERS; do
                echo "🔗 Closing related issue #$issue"
                gh issue close $issue --comment "✅ Resolved by PR #$PR_NUMBER (auto-merged)"
              done
            fi
            
          else
            echo "❌ Auto-merge failed"
            gh pr comment $PR_NUMBER --body "🤖 **Auto-Merge Failed**

❌ Attempted to auto-merge this PR but encountered an issue. 

Please check the merge requirements and try again manually if needed."
          fi
          
      - name: Execute Action - Request Review
        if: steps.decision.outputs.action == 'request-review'
        env:
          GH_TOKEN: ${{ secrets.COPILOT_TOKEN }}
        run: |
          echo "👥 Autonomous Review Request"
          echo "==========================="
          
          PR_NUMBER="${{ steps.discovery.outputs.pr-number }}"
          
          # Get repository collaborators/maintainers
          MAINTAINERS=$(gh api repos/${{ github.repository }}/collaborators --jq '.[].login' | grep -v "app\|bot" | head -3)
          
          # Request review from maintainers
          for maintainer in $MAINTAINERS; do
            echo "📋 Requesting review from $maintainer"
            gh pr edit $PR_NUMBER --add-reviewer "$maintainer" || true
          done
          
          # Convert from draft if needed
          if [ "${{ steps.discovery.outputs.pr-draft }}" = "true" ]; then
            gh pr ready $PR_NUMBER
            echo "✅ Converted from draft to ready for review"
          fi
          
          # Comment on PR
          gh pr comment $PR_NUMBER --body "🤖 **Autonomous Review Request**

✅ All automated quality checks have passed! This PR is now ready for human review.

**Quality Summary:**
- ✅ ${{ steps.decision.outputs.passing-checks }} checks passing
- ✅ No merge conflicts
- ✅ Code quality standards met

Requesting review from maintainers..."
          
      - name: Execute Action - Run Quality Checks
        if: steps.decision.outputs.action == 'run-quality-checks'
        env:
          GH_TOKEN: ${{ secrets.COPILOT_TOKEN }}
        run: |
          echo "🔍 Autonomous Quality Check Initiation"
          echo "====================================="
          
          PR_NUMBER="${{ steps.discovery.outputs.pr-number }}"
          
          # Trigger comprehensive quality validation
          echo "🚀 Triggering Advanced Quality Gate..."
          gh workflow run "Advanced Quality Gate" --field pr_number="$PR_NUMBER"
          
          echo "🚀 Triggering Documentation Validation..."
          gh workflow run "Documentation Validation & Auto-Fix" --field pr_number="$PR_NUMBER"
          
          echo "🚀 Triggering RUTOS Pre-Review Validation..."
          gh workflow run "RUTOS Pre-Review Validation" --field pr_number="$PR_NUMBER"
          
          # Comment on PR
          gh pr comment $PR_NUMBER --body "🤖 **Autonomous Quality Validation Initiated**

🔍 Comprehensive quality checks have been triggered:
- Advanced Quality Gate Analysis  
- Documentation Validation & Auto-Fix
- RUTOS Pre-Review Validation

Results will be available shortly. The PR will be automatically processed based on the outcomes."
          
      - name: Status Summary & Next Steps
        if: always()
        env:
          GH_TOKEN: ${{ secrets.COPILOT_TOKEN }}
        run: |
          echo "📊 Autonomous Processing Summary"
          echo "================================"
          echo "PR: #${{ steps.discovery.outputs.pr-number }}"
          echo "Action Taken: ${{ steps.decision.outputs.action }}"
          echo "Trigger: ${{ steps.discovery.outputs.trigger-type }}"
          echo "Copilot PR: ${{ steps.discovery.outputs.is-copilot-pr }}"
          echo ""
          echo "🎯 Current Status:"
          echo "   Passing Checks: ${{ steps.decision.outputs.passing-checks }}"
          echo "   Failing Checks: ${{ steps.decision.outputs.failing-checks }}"
          echo "   Pending Checks: ${{ steps.decision.outputs.pending-checks }}"
          echo "   Has Conflicts: ${{ steps.decision.outputs.has-conflicts }}"
          echo "   Approved Reviews: ${{ steps.decision.outputs.approved-reviews }}"
          echo ""
          
          if [ "${{ steps.decision.outputs.action }}" != "none" ]; then
            echo "✅ Autonomous action completed successfully"
          else
            echo "ℹ️ No autonomous action required at this time"
          fi
          
          echo ""
          echo "🔄 Next autonomous check in 15 minutes (scheduled run)"
