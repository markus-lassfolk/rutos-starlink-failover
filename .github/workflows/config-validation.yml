name: Configuration Validation

on:
  push:
    branches: [ '*' ]
    paths:
      - '**/*.json'
      - '**/*.yaml'
      - '**/*.yml'
  pull_request:
    branches: [ '*' ]
    paths:
      - '**/*.json'
      - '**/*.yaml'
      - '**/*.yml'

jobs:
  config-validation:
    runs-on: ubuntu-latest
    name: Validate Configuration Files
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get changed files
        id: changed-files
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "Getting config files changed in PR #${{ github.event.number }}"
            # Get files changed in this PR, filter for config files
            git fetch origin ${{ github.base_ref }}:${{ github.base_ref }}
            changed_files=$(git diff --name-only ${{ github.base_ref }}..HEAD | grep -E '\.(json|yaml|yml)$' || echo "")
            echo "Changed config files: $changed_files"
            echo "files<<EOF" >> $GITHUB_OUTPUT
            echo "$changed_files" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "Push event - checking all config files"
            echo "files<<EOF" >> $GITHUB_OUTPUT
            find . -name "*.json" -o -name "*.yaml" -o -name "*.yml" | grep -v .git >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
      
      - name: Install validation tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq yamllint
          npm install -g jsonlint
      
      - name: Validate JSON files
        run: |
          echo "Validating JSON files..."
          if [ -z "${{ steps.changed-files.outputs.files }}" ]; then
            echo "No config files to validate"
            exit 0
          fi
          
          echo "${{ steps.changed-files.outputs.files }}" | while IFS= read -r file; do
            if [ -z "$file" ] || [ ! -f "$file" ]; then continue; fi
            
            case "$file" in
              *.json)
                echo "🔍 Checking JSON: $file"
                if ! jq empty "$file" 2>/dev/null; then
                  echo "::error file=$file::Invalid JSON syntax"
                  exit 1
                else
                  echo "✅ $file is valid JSON"
                fi
                ;;
              *.yaml|*.yml)
                echo "🔍 Checking YAML: $file"
                if ! yamllint -d relaxed "$file" 2>/dev/null; then
                  echo "::warning file=$file::YAML formatting issues detected"
                else
                  echo "✅ $file is valid YAML"
                fi
                ;;
            esac
          done
      
      - name: Validate Azure Function configuration
        run: |
          echo "Validating Azure Function configurations..."
          if [ -z "${{ steps.changed-files.outputs.files }}" ]; then
            echo "No config files to validate"
            exit 0
          fi
          
          echo "${{ steps.changed-files.outputs.files }}" | while IFS= read -r file; do
            if [ -z "$file" ] || [ ! -f "$file" ]; then continue; fi
            
            case "$file" in
              function.json)
                echo "🔍 Checking Azure Function config: $file"
                
                # Check required fields
                if ! jq -e '.bindings' "$file" >/dev/null; then
                  echo "::error file=$file::Missing 'bindings' field in function.json"
                  exit 1
                fi
                
                # Check for HTTP trigger
                if jq -e '.bindings[] | select(.type == "httpTrigger")' "$file" >/dev/null; then
                  echo "✅ HTTP trigger found in $file"
                fi
                
                # Check for output bindings
                output_count=$(jq '[.bindings[] | select(.direction == "out")] | length' "$file")
                if [ "$output_count" -gt 0 ]; then
                  echo "✅ Found $output_count output binding(s) in $file"
                fi
                ;;
            esac
          done
      
      - name: Check for sensitive data in changed JSON files
        run: |
          echo "Checking for potential sensitive data in changed files..."
          if [ -z "${{ steps.changed-files.outputs.files }}" ]; then
            echo "No config files to validate"
            exit 0
          fi
          
          found_sensitive=false
          echo "${{ steps.changed-files.outputs.files }}" | while IFS= read -r file; do
            if [ -z "$file" ] || [ ! -f "$file" ]; then continue; fi
            
            case "$file" in
              *.json)
                if grep -i -n "password\|secret\|key\|token" "$file"; then
                  echo "::warning file=$file::Found potential sensitive data. Please review."
                  found_sensitive=true
                fi
                ;;
            esac
          done
          
          if [ "$found_sensitive" = false ]; then
            echo "✅ No obvious sensitive data found in changed JSON files"
          fi
