name: ShellCheck & Formatting

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ '*' ]

permissions:
  contents: write
  pull-requests: read

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install shellcheck, shfmt, and GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck
          curl -sSLo /usr/local/bin/shfmt https://github.com/mvdan/sh/releases/download/v3.7.0/shfmt_v3.7.0_linux_amd64
          chmod +x /usr/local/bin/shfmt
          # Install GitHub CLI
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y gh
      
      - name: Auto-format shell scripts with shfmt
        if: github.event_name == 'push'
        run: |
          if find . -type f \( -name '*.sh' -o -name '99-pushover_notify*' \) | head -1 > /dev/null; then
            echo "🎨 Auto-formatting shell scripts with shfmt..."
            # Format bash scripts with bash-specific options
            find . -type f -name '*.sh' ! -name '*-rutos.sh' -exec shfmt -w -i 4 -ci {} +
            # Format RUTOS scripts with POSIX-compatible options
            find . -type f -name '*-rutos.sh' -exec shfmt -w -i 4 -ci -ln posix {} +
            # Format other shell files (pushover notify scripts)
            find . -type f -name '99-pushover_notify*' -exec shfmt -w -i 4 -ci {} +
            echo "✅ Shell scripts formatted successfully"
          else
            echo "No shell scripts found to format"
          fi
      
      - name: Commit formatting changes
        if: github.event_name == 'push'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          if ! git diff --cached --quiet; then
            git commit -m "🎨 Auto-format shell scripts with shfmt [skip ci]"
            git push
            echo "✅ Committed shell formatting changes"
          else
            echo "✅ No shell formatting changes needed"
          fi
      
      - name: Enforce script and config file permissions
        run: |
          # Config files should be 600
          find config -type f -name '*.sh' -exec chmod 600 {} + 2>/dev/null || true
          # Scripts should be 755
          find scripts -type f -name '*.sh' -exec chmod 755 {} + 2>/dev/null || true
          find Starlink-RUTOS-Failover -type f -name '*-rutos.sh' -exec chmod 755 {} +
          # Legacy/compatibility: notify scripts
          find Starlink-RUTOS-Failover -type f -name '99-pushover_notify*' -exec chmod 755 {} + 2>/dev/null || true
      - name: Run ShellCheck on changed shell scripts
        run: |
          echo "🔍 Checking for changed shell files..."
          
          # For PR events, check only changed files
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "📋 PR mode: Checking only changed files"
            
            # Get list of changed files from the PR
            changed_files=$(gh pr view ${{ github.event.pull_request.number }} --json files --jq '.files[].path' || true)
            
            if [ -z "$changed_files" ]; then
              echo "⚠️  Could not get changed files from PR, falling back to git diff"
              changed_files=$(git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }})
            fi
            
            # Filter for shell files
            shell_files=""
            for file in $changed_files; do
              if [ -f "$file" ] && { [ "${file##*.}" = "sh" ] || [[ "$(basename "$file")" == 99-pushover_notify* ]]; }; then
                shell_files="$shell_files $file"
              fi
            done
            
            if [ -n "$shell_files" ]; then
              echo "🔧 Running ShellCheck on changed shell files:"
              echo "$shell_files"
              shellcheck --exclude=SC1090,SC1091 $shell_files
            else
              echo "✅ No shell files changed in this PR"
            fi
          else
            echo "📋 Push mode: Checking all shell files"
            find . -type f \( -name '*.sh' -o -name '99-pushover_notify*' \) -exec shellcheck --exclude=SC1090,SC1091 {} +
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Verify shell script formatting (shfmt)
        run: |
          echo "🎨 Checking shell script formatting..."
          
          # For PR events, check only changed files
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "📋 PR mode: Checking formatting of changed files only"
            
            # Get list of changed files from the PR
            changed_files=$(gh pr view ${{ github.event.pull_request.number }} --json files --jq '.files[].path' || true)
            
            if [ -z "$changed_files" ]; then
              echo "⚠️  Could not get changed files from PR, falling back to git diff"
              changed_files=$(git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }})
            fi
            
            # Filter for shell files
            shell_files=""
            for file in $changed_files; do
              if [ -f "$file" ] && { [ "${file##*.}" = "sh" ] || [[ "$(basename "$file")" == 99-pushover_notify* ]]; }; then
                shell_files="$shell_files $file"
              fi
            done
            
            if [ -n "$shell_files" ]; then
              echo "🔧 Checking formatting on changed shell files:"
              echo "$shell_files"
              shfmt -d -i 4 -ci $shell_files
            else
              echo "✅ No shell files changed in this PR"
            fi
          else
            echo "📋 Push mode: Checking formatting of all shell files"
            find . -type f \( -name '*.sh' -o -name '99-pushover_notify*' \) -exec shfmt -d -i 4 -ci {} +
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Check for RUTOS-specific best practices
        run: |
          echo "Checking RUTOS-specific best practices..."
          
          # Check for UCI usage best practices
          if grep -r "uci get" --include="*.sh" . | grep -v "2>/dev/null"; then
            echo "::warning::Found uci commands without error handling. Consider adding '2>/dev/null || echo default'"
          fi
          
          # Check for proper logging
          if grep -r "echo.*\[" --include="*.sh" . | head -5; then
            echo "::info::Consider using logger command for system logging instead of echo"
          fi
          
          # Check for hardcoded paths that should be configurable
          if grep -r "/overlay/messages" --include="*.sh" . | grep -v "uci get\|LOG_FILE\|DEFAULT"; then
            echo "::warning::Found hardcoded paths. Consider using UCI configuration"
          fi
          
          # Check for proper error handling in scripts
          missing_set_e=$(find . -name "*.sh" -exec grep -L "set -e" {} \; | head -5)
          if [ -n "$missing_set_e" ]; then
            echo "::info::Consider adding 'set -e' for better error handling in:"
            echo "$missing_set_e"
          fi
