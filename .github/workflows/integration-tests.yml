name: Integration Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**/*.go'
      - 'go.mod'
      - 'go.sum'
      - 'cmd/**'
      - 'pkg/**'
      - 'scripts/**'
      - 'tests/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**/*.go'
      - 'go.mod'
      - 'go.sum'
      - 'cmd/**'
      - 'pkg/**'
      - 'scripts/**'
      - 'tests/**'
  schedule:
    - cron: '0 2 * * 0'  # Weekly on Sunday at 2 AM

permissions:
  contents: read
  pull-requests: read

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    name: Integration Tests
    strategy:
      matrix:
        test-suite: ['unit', 'integration', 'e2e']
        go-version: ['1.22']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
          cache: true
      
      - name: Install dependencies
        run: |
          echo "📦 Installing Go dependencies..."
          go mod download
          go mod verify
      
      - name: Install test tools
        run: |
          echo "🔧 Installing test tools..."
          go install github.com/axw/gocov/gocov@latest
          go install github.com/AlekSi/gocov-xml@latest
          go install github.com/tebeka/go2xunit@latest
          go install gotest.tools/gotestsum@latest
      
      - name: Run unit tests
        if: matrix.test-suite == 'unit'
        run: |
          echo "🧪 Running unit tests..."
          mkdir -p test-results
          
          # Run unit tests with coverage
          gotestsum --format=standard-verbose --jsonfile=test-results/unit-tests.json --junitfile=test-results/unit-tests.xml \
            -- go test -v -race -coverprofile=coverage-unit.out -covermode=atomic ./pkg/...
          
          # Generate coverage report
          if [ -f coverage-unit.out ]; then
            go tool cover -html=coverage-unit.out -o coverage-unit.html
            go tool cover -func=coverage-unit.out > coverage-unit.txt
          fi
      
      - name: Run integration tests
        if: matrix.test-suite == 'integration'
        run: |
          echo "🔗 Running integration tests..."
          mkdir -p test-results
          
          # Run integration tests
          gotestsum --format=standard-verbose --jsonfile=test-results/integration-tests.json --junitfile=test-results/integration-tests.xml \
            -- go test -v -race -coverprofile=coverage-integration.out -covermode=atomic -tags=integration ./...
          
          # Generate coverage report
          if [ -f coverage-integration.out ]; then
            go tool cover -html=coverage-integration.out -o coverage-integration.html
            go tool cover -func=coverage-integration.out > coverage-integration.txt
          fi
      
      - name: Run end-to-end tests
        if: matrix.test-suite == 'e2e'
        run: |
          echo "🌐 Running end-to-end tests..."
          mkdir -p test-results
          
          # Build binaries for testing
          go build -o bin/starfaild ./cmd/starfaild
          go build -o bin/starfailsysmgmt ./cmd/starfailsysmgmt
          
          # Run E2E tests
          gotestsum --format=standard-verbose --jsonfile=test-results/e2e-tests.json --junitfile=test-results/e2e-tests.xml \
            -- go test -v -race -coverprofile=coverage-e2e.out -covermode=atomic -tags=e2e ./...
          
          # Generate coverage report
          if [ -f coverage-e2e.out ]; then
            go tool cover -html=coverage-e2e.out -o coverage-e2e.html
            go tool cover -func=coverage-e2e.out > coverage-e2e.txt
          fi
      
      - name: Run performance tests
        if: matrix.test-suite == 'unit'
        run: |
          echo "⚡ Running performance tests..."
          mkdir -p test-results
          
          # Run benchmarks
          gotestsum --format=standard-verbose --jsonfile=test-results/benchmark-tests.json \
            -- go test -bench=. -benchmem -run=^$ ./pkg/... > benchmark-results.txt 2>&1 || true
          
          # Analyze benchmark results
          if [ -f benchmark-results.txt ]; then
            echo "📊 Benchmark Results Summary:"
            grep -E "^Benchmark|^ok|^PASS|^FAIL" benchmark-results.txt || echo "No benchmark results found"
          fi
      
      - name: Run stress tests
        if: matrix.test-suite == 'integration'
        run: |
          echo "💪 Running stress tests..."
          mkdir -p test-results
          
          # Run stress tests with multiple iterations
          for i in {1..3}; do
            echo "Stress test iteration $i/3"
            gotestsum --format=standard-verbose \
              -- go test -v -race -timeout=10m -run=^TestStress ./pkg/... || true
          done
      
      - name: Test binary functionality
        if: matrix.test-suite == 'e2e'
        run: |
          echo "🔧 Testing binary functionality..."
          
          # Test starfaild binary
          echo "Testing starfaild binary..."
          ./bin/starfaild --help || echo "starfaild help command completed"
          
          # Test starfailsysmgmt binary
          echo "Testing starfailsysmgmt binary..."
          ./bin/starfailsysmgmt --help || echo "starfailsysmgmt help command completed"
          
          # Test version commands
          ./bin/starfaild --version || echo "starfaild version command completed"
          ./bin/starfailsysmgmt --version || echo "starfailsysmgmt version command completed"
      
      - name: Run compatibility tests
        if: matrix.test-suite == 'integration'
        run: |
          echo "🔍 Running compatibility tests..."
          
          # Test Go version compatibility
          go version
          
          # Test module compatibility
          go mod verify
          
          # Test build compatibility
          go build ./...
          
          # Test test compatibility
          go test ./... -run=^TestCompatibility || echo "No compatibility tests found"
      
      - name: Generate test report
        if: always()
        run: |
          echo "📊 Generating test report..."
          
          # Create a comprehensive test report
          echo "# Integration Test Report" > test-report.md
          echo "" >> test-report.md
          echo "**Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> test-report.md
          echo "**Branch:** ${{ github.ref_name }}" >> test-report.md
          echo "**Commit:** ${{ github.sha }}" >> test-report.md
          echo "**Test Suite:** ${{ matrix.test-suite }}" >> test-report.md
          echo "**Go Version:** ${{ matrix.go-version }}" >> test-report.md
          echo "" >> test-report.md
          
          echo "## Test Results" >> test-report.md
          
          # Add test result files if they exist
          for result_file in test-results/*.json; do
            if [ -f "$result_file" ]; then
              echo "### $(basename "$result_file" .json)" >> test-report.md
              jq -r '.TestResults[] | "- \(.Test): \(.Status)"' "$result_file" >> test-report.md 2>/dev/null || echo "- No test results found" >> test-report.md
              echo "" >> test-report.md
            fi
          done
          
          # Add coverage information if available
          for coverage_file in coverage-*.txt; do
            if [ -f "$coverage_file" ]; then
              echo "### Coverage: $(basename "$coverage_file" .txt)" >> test-report.md
              tail -5 "$coverage_file" >> test-report.md
              echo "" >> test-report.md
            fi
          done
          
          echo "Report generated successfully"
      
      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.test-suite }}-${{ matrix.go-version }}
          path: |
            test-results/
            coverage-*.out
            coverage-*.html
            coverage-*.txt
            benchmark-results.txt
            test-report.md
          retention-days: 30
      
      - name: Upload coverage to Codecov
        if: matrix.test-suite == 'unit' && always()
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage-unit.out
          flags: integration-tests
          name: codecov-integration
          fail_ci_if_error: false
