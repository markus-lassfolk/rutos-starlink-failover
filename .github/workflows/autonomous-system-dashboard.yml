name: Autonomous System Status Dashboard

on:
  schedule:
    - cron: "0 */6 * * *"  # Every 6 hours
  workflow_dispatch:
    inputs:
      create_report:
        description: 'Create comprehensive system report'
        type: boolean
        default: true
      notify_maintainers:
        description: 'Notify maintainers of system status'
        type: boolean
        default: false

permissions:
  contents: write
  pull-requests: write
  actions: read
  issues: write

jobs:
  system-dashboard:
    runs-on: ubuntu-latest
    name: Autonomous System Dashboard
    
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.COPILOT_TOKEN }}
          fetch-depth: 0
          
      - name: Setup Dashboard Tools
        run: |
          sudo apt-get update && sudo apt-get install -y jq gh curl
          
      - name: Collect System Metrics
        id: metrics
        env:
          GH_TOKEN: ${{ secrets.COPILOT_TOKEN }}
        run: |
          echo "🤖 Autonomous System Status Dashboard"
          echo "====================================="
          echo ""
          
          # Get current timestamp
          TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          echo "📅 Report Generated: $TIMESTAMP"
          echo ""
          
          # Analyze open PRs
          echo "📊 PR Analysis"
          echo "=============="
          
          TOTAL_PRS=$(gh pr list --state open --json number | jq length)
          COPILOT_PRS=$(gh pr list --state open --json number,author --jq '.[] | select(.author.login | test("copilot|github-actions|dependabot")) | .number' | wc -l)
          HUMAN_PRS=$((TOTAL_PRS - COPILOT_PRS))
          DRAFT_PRS=$(gh pr list --state open --json number,isDraft --jq '.[] | select(.isDraft == true) | .number' | wc -l)
          READY_PRS=$((TOTAL_PRS - DRAFT_PRS))
          
          echo "Total Open PRs: $TOTAL_PRS"
          echo "  - Copilot/Automated: $COPILOT_PRS"
          echo "  - Human: $HUMAN_PRS"
          echo "  - Draft: $DRAFT_PRS"
          echo "  - Ready for Review: $READY_PRS"
          echo ""
          
          # Analyze recent workflow runs
          echo "📊 Workflow Activity (Last 24h)"
          echo "==============================="
          
          WORKFLOW_RUNS=$(gh api repos/${{ github.repository }}/actions/runs --paginate --jq '.workflow_runs[] | select(.created_at > (now - 86400 | strftime("%Y-%m-%dT%H:%M:%SZ"))) | {name: .name, status: .status, conclusion: .conclusion}' | jq -s .)
          
          TOTAL_RUNS=$(echo "$WORKFLOW_RUNS" | jq length)
          SUCCESS_RUNS=$(echo "$WORKFLOW_RUNS" | jq '[.[] | select(.conclusion == "success")] | length')
          FAILURE_RUNS=$(echo "$WORKFLOW_RUNS" | jq '[.[] | select(.conclusion == "failure")] | length')
          IN_PROGRESS_RUNS=$(echo "$WORKFLOW_RUNS" | jq '[.[] | select(.status == "in_progress")] | length')
          
          echo "Total Runs: $TOTAL_RUNS"
          echo "  - Successful: $SUCCESS_RUNS"
          echo "  - Failed: $FAILURE_RUNS"
          echo "  - In Progress: $IN_PROGRESS_RUNS"
          
          if [ $TOTAL_RUNS -gt 0 ]; then
            SUCCESS_RATE=$(( (SUCCESS_RUNS * 100) / TOTAL_RUNS ))
            echo "  - Success Rate: $SUCCESS_RATE%"
          else
            SUCCESS_RATE=0
            echo "  - Success Rate: No data"
          fi
          echo ""
          
          # Check autonomous workflows specifically
          echo "📊 Autonomous Workflow Status"
          echo "============================"
          
          AUTONOMOUS_WORKFLOWS=(
            "Ultimate Autonomous Orchestrator"
            "Advanced Quality Gate"
            "Smart Auto-Fix Engine"
            "Documentation Validation & Auto-Fix"
            "Intelligent Merge Decision Engine"
            "Advanced Conflict Resolution Engine"
          )
          
          AUTONOMOUS_STATUS=""
          for workflow in "${AUTONOMOUS_WORKFLOWS[@]}"; do
            LATEST_RUN=$(gh api repos/${{ github.repository }}/actions/workflows --jq ".workflows[] | select(.name == \"$workflow\") | .id" | head -1)
            if [ -n "$LATEST_RUN" ]; then
              RUN_STATUS=$(gh api repos/${{ github.repository }}/actions/workflows/$LATEST_RUN/runs --jq '.workflow_runs[0].conclusion // .workflow_runs[0].status // "never_run"' | head -1)
              echo "  - $workflow: $RUN_STATUS"
              AUTONOMOUS_STATUS="$AUTONOMOUS_STATUS|$workflow:$RUN_STATUS"
            else
              echo "  - $workflow: not_found"
              AUTONOMOUS_STATUS="$AUTONOMOUS_STATUS|$workflow:not_found"
            fi
          done
          echo ""
          
          # Analyze recent issues
          echo "📊 Issue Management"
          echo "=================="
          
          TOTAL_ISSUES=$(gh issue list --state open --json number | jq length)
          COPILOT_ISSUES=$(gh issue list --state open --json number,author --jq '.[] | select(.author.login | test("copilot|github-actions")) | .number' | wc -l)
          
          # Check for stale issues (older than 30 days)
          STALE_ISSUES=$(gh issue list --state open --json number,createdAt --jq ".[] | select(.createdAt < (now - (30 * 86400) | strftime(\"%Y-%m-%dT%H:%M:%SZ\"))) | .number" | wc -l)
          
          echo "Total Open Issues: $TOTAL_ISSUES"
          echo "  - Copilot Created: $COPILOT_ISSUES"
          echo "  - Stale (>30 days): $STALE_ISSUES"
          echo ""
          
          # Calculate overall system health score
          echo "🎯 System Health Assessment"
          echo "=========================="
          
          HEALTH_SCORE=100
          
          # Deduct points for failures
          if [ $FAILURE_RUNS -gt 0 ] && [ $TOTAL_RUNS -gt 0 ]; then
            FAILURE_RATE=$(( (FAILURE_RUNS * 100) / TOTAL_RUNS ))
            HEALTH_SCORE=$((HEALTH_SCORE - FAILURE_RATE))
            echo "  - Workflow failures: -$FAILURE_RATE points"
          fi
          
          # Deduct points for stale issues
          if [ $STALE_ISSUES -gt 5 ]; then
            STALE_PENALTY=$((STALE_ISSUES * 2))
            if [ $STALE_PENALTY -gt 20 ]; then
              STALE_PENALTY=20
            fi
            HEALTH_SCORE=$((HEALTH_SCORE - STALE_PENALTY))
            echo "  - Stale issues: -$STALE_PENALTY points"
          fi
          
          # Deduct points for too many open PRs
          if [ $TOTAL_PRS -gt 10 ]; then
            PR_PENALTY=$(((TOTAL_PRS - 10) * 3))
            if [ $PR_PENALTY -gt 30 ]; then
              PR_PENALTY=30
            fi
            HEALTH_SCORE=$((HEALTH_SCORE - PR_PENALTY))
            echo "  - Excessive open PRs: -$PR_PENALTY points"
          fi
          
          # Ensure minimum score
          if [ $HEALTH_SCORE -lt 0 ]; then
            HEALTH_SCORE=0
          fi
          
          echo ""
          echo "Overall System Health: $HEALTH_SCORE/100"
          
          # Determine health status
          if [ $HEALTH_SCORE -ge 90 ]; then
            HEALTH_STATUS="EXCELLENT"
            HEALTH_EMOJI="🟢"
          elif [ $HEALTH_SCORE -ge 75 ]; then
            HEALTH_STATUS="GOOD"
            HEALTH_EMOJI="🟡"
          elif [ $HEALTH_SCORE -ge 50 ]; then
            HEALTH_STATUS="FAIR"
            HEALTH_EMOJI="🟠"
          else
            HEALTH_STATUS="POOR"
            HEALTH_EMOJI="🔴"
          fi
          
          echo "Status: $HEALTH_EMOJI $HEALTH_STATUS"
          echo ""
          
          # Set outputs for next steps
          {
            echo "timestamp=$TIMESTAMP"
            echo "total-prs=$TOTAL_PRS"
            echo "copilot-prs=$COPILOT_PRS"
            echo "human-prs=$HUMAN_PRS"
            echo "total-runs=$TOTAL_RUNS"
            echo "success-runs=$SUCCESS_RUNS"
            echo "failure-runs=$FAILURE_RUNS"
            echo "success-rate=$SUCCESS_RATE"
            echo "total-issues=$TOTAL_ISSUES"
            echo "stale-issues=$STALE_ISSUES"
            echo "health-score=$HEALTH_SCORE"
            echo "health-status=$HEALTH_STATUS"
            echo "health-emoji=$HEALTH_EMOJI"
            echo "autonomous-status=$AUTONOMOUS_STATUS"
          } >> $GITHUB_OUTPUT
          
      - name: Generate System Report
        if: inputs.create_report == true || github.event_name == 'schedule'
        run: |
          echo "📝 Generating Comprehensive System Report"
          
          REPORT_FILE="AUTONOMOUS_SYSTEM_STATUS.md"
          
          cat > "$REPORT_FILE" << 'EOF'
# 🤖 Autonomous System Status Report
          
**Generated:** ${{ steps.metrics.outputs.timestamp }}  
**Overall Health:** ${{ steps.metrics.outputs.health-emoji }} ${{ steps.metrics.outputs.health-status }} (${{ steps.metrics.outputs.health-score }}/100)

## 📊 System Metrics

### Pull Request Management
- **Total Open PRs:** ${{ steps.metrics.outputs.total-prs }}
  - Automated (Copilot/GitHub Actions): ${{ steps.metrics.outputs.copilot-prs }}
  - Human Contributors: ${{ steps.metrics.outputs.human-prs }}

### Workflow Performance (24h)
- **Total Runs:** ${{ steps.metrics.outputs.total-runs }}
  - Successful: ${{ steps.metrics.outputs.success-runs }}
  - Failed: ${{ steps.metrics.outputs.failure-runs }}
  - **Success Rate:** ${{ steps.metrics.outputs.success-rate }}%

### Issue Management
- **Open Issues:** ${{ steps.metrics.outputs.total-issues }}
- **Stale Issues:** ${{ steps.metrics.outputs.stale-issues }} (>30 days)

## 🤖 Autonomous Workflow Status

EOF
          
          # Add autonomous workflow status
          echo "${{ steps.metrics.outputs.autonomous-status }}" | tr '|' '\n' | while IFS=':' read -r workflow status; do
            if [ -n "$workflow" ] && [ -n "$status" ]; then
              case $status in
                "success") echo "- ✅ **$workflow**: Healthy" >> "$REPORT_FILE" ;;
                "failure") echo "- ❌ **$workflow**: Failing" >> "$REPORT_FILE" ;;
                "in_progress") echo "- 🔄 **$workflow**: Running" >> "$REPORT_FILE" ;;
                "not_found") echo "- ⚪ **$workflow**: Not Found" >> "$REPORT_FILE" ;;
                *) echo "- ❓ **$workflow**: $status" >> "$REPORT_FILE" ;;
              esac
            fi
          done
          
          cat >> "$REPORT_FILE" << 'EOF'

## 🎯 System Health Assessment

The autonomous system health is calculated based on:
- Workflow success rates (past 24 hours)
- Number of stale issues
- PR management efficiency
- Overall system stability

### Health Score: ${{ steps.metrics.outputs.health-score }}/100

**Status: ${{ steps.metrics.outputs.health-emoji }} ${{ steps.metrics.outputs.health-status }}**

## 🚀 Autonomous Features Active

✅ **Ultimate Autonomous Orchestrator** - Central coordination  
✅ **Advanced Quality Gate** - Comprehensive validation  
✅ **Smart Auto-Fix Engine** - Automatic issue resolution  
✅ **Documentation Validation** - Content quality assurance  
✅ **Intelligent Merge Engine** - Smart merge decisions  
✅ **Conflict Resolution** - Automated conflict handling  

## 📈 Recommendations

EOF
          
          # Add recommendations based on metrics
          if [ ${{ steps.metrics.outputs.health-score }} -lt 80 ]; then
            echo "- 🔧 **System attention needed** - Health score below optimal" >> "$REPORT_FILE"
          fi
          
          if [ ${{ steps.metrics.outputs.failure-runs }} -gt 5 ]; then
            echo "- ⚠️ **High workflow failure rate** - Review recent failures" >> "$REPORT_FILE"
          fi
          
          if [ ${{ steps.metrics.outputs.stale-issues }} -gt 10 ]; then
            echo "- 📋 **Clean up stale issues** - ${{ steps.metrics.outputs.stale-issues }} issues need attention" >> "$REPORT_FILE"
          fi
          
          if [ ${{ steps.metrics.outputs.total-prs }} -gt 15 ]; then
            echo "- 🚀 **Review open PRs** - High number of open PRs detected" >> "$REPORT_FILE"
          fi
          
          if [ ${{ steps.metrics.outputs.health-score }} -ge 90 ]; then
            echo "- 🎉 **System running optimally** - All autonomous features performing well" >> "$REPORT_FILE"
          fi
          
          echo "" >> "$REPORT_FILE"
          echo "*This report is automatically generated by the Autonomous System Status Dashboard.*" >> "$REPORT_FILE"
          
          echo "✅ System report generated: $REPORT_FILE"
          
      - name: Commit System Report
        if: inputs.create_report == true || github.event_name == 'schedule'
        env:
          GH_TOKEN: ${{ secrets.COPILOT_TOKEN }}
        run: |
          if [ -f "AUTONOMOUS_SYSTEM_STATUS.md" ]; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            
            git add AUTONOMOUS_SYSTEM_STATUS.md
            
            if git commit -m "🤖 Update Autonomous System Status Report

Health Score: ${{ steps.metrics.outputs.health-score }}/100
Status: ${{ steps.metrics.outputs.health-emoji }} ${{ steps.metrics.outputs.health-status }}
Generated: ${{ steps.metrics.outputs.timestamp }}

[skip ci]"; then
              git push origin main
              echo "✅ System report committed and pushed"
            else
              echo "ℹ️ No changes to commit"
            fi
          fi
          
      - name: Notify Maintainers
        if: inputs.notify_maintainers == true || (github.event_name == 'schedule' && steps.metrics.outputs.health-score < 75)
        env:
          GH_TOKEN: ${{ secrets.COPILOT_TOKEN }}
        run: |
          echo "🔔 Creating maintenance notification"
          
          ISSUE_TITLE="🤖 Autonomous System Status Alert - ${{ steps.metrics.outputs.health-status }}"
          
          ISSUE_BODY="## Autonomous System Status Alert

**Timestamp:** ${{ steps.metrics.outputs.timestamp }}  
**Health Score:** ${{ steps.metrics.outputs.health-score }}/100  
**Status:** ${{ steps.metrics.outputs.health-emoji }} ${{ steps.metrics.outputs.health-status }}

### System Metrics
- Open PRs: ${{ steps.metrics.outputs.total-prs }} (Automated: ${{ steps.metrics.outputs.copilot-prs }}, Human: ${{ steps.metrics.outputs.human-prs }})
- Workflow Success Rate (24h): ${{ steps.metrics.outputs.success-rate }}%
- Open Issues: ${{ steps.metrics.outputs.total-issues }} (Stale: ${{ steps.metrics.outputs.stale-issues }})

### Action Required
This automated alert was triggered because:"
          
          if [ ${{ steps.metrics.outputs.health-score }} -lt 75 ]; then
            ISSUE_BODY="$ISSUE_BODY
- System health score is below 75%"
          fi
          
          if [ ${{ steps.metrics.outputs.failure-runs }} -gt 5 ]; then
            ISSUE_BODY="$ISSUE_BODY
- High workflow failure rate detected"
          fi
          
          ISSUE_BODY="$ISSUE_BODY

### Recommended Actions
1. Review recent workflow failures
2. Address stale issues if any
3. Monitor autonomous system performance
4. Check system report: [AUTONOMOUS_SYSTEM_STATUS.md](./AUTONOMOUS_SYSTEM_STATUS.md)

*This issue was automatically created by the Autonomous System Status Dashboard.*"

          # Check if similar issue already exists
          EXISTING_ISSUE=$(gh issue list --state open --search "Autonomous System Status Alert" --json number --jq '.[0].number // empty')
          
          if [ -n "$EXISTING_ISSUE" ]; then
            echo "Updating existing issue #$EXISTING_ISSUE"
            gh issue comment $EXISTING_ISSUE --body "$ISSUE_BODY"
          else
            echo "Creating new status alert issue"
            gh issue create --title "$ISSUE_TITLE" --body "$ISSUE_BODY" --label "automated,maintenance,high-priority"
          fi
          
      - name: Dashboard Summary
        if: always()
        run: |
          echo "🤖 Autonomous System Dashboard Summary"
          echo "======================================"
          echo "Health Score: ${{ steps.metrics.outputs.health-score }}/100"
          echo "Status: ${{ steps.metrics.outputs.health-emoji }} ${{ steps.metrics.outputs.health-status }}"
          echo "PRs: ${{ steps.metrics.outputs.total-prs }} total (${{ steps.metrics.outputs.copilot-prs }} automated)"
          echo "Workflows: ${{ steps.metrics.outputs.success-rate }}% success rate"
          echo "Issues: ${{ steps.metrics.outputs.total-issues }} open (${{ steps.metrics.outputs.stale-issues }} stale)"
          echo ""
          echo "🔄 Next dashboard update in 6 hours"
          echo "📊 Full report available: AUTONOMOUS_SYSTEM_STATUS.md"
