name: Autonomous Copilot Manager

on:
  pull_request:
    types:
      - opened
      - reopened
      - ready_for_review
      - review_requested
      - synchronize
  schedule:
    - cron: "*/10 * * * *"
  workflow_run:
    workflows: ["*"]
    types:
      - requested
      - completed
  workflow_dispatch: 

jobs:
  autonomous-manager:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      actions: write

    steps:
      - name: Install gh CLI (if needed)
        run: sudo apt-get install gh -y

      - name: Enable Debug Mode
        run: set -x

      #########################################################
      # 1. Fallback: Mark Draft PRs Ready if Idle for 30 Minutes
      #########################################################
      - name: Mark Draft PRs Ready (Fallback)
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          echo "üîç Fetching draft PRs (API-only)..."
          PRS=$(gh api repos/${{ github.repository }}/pulls \
            --jq '.[] | select(.draft==true) | .number')

          if [ -z "$PRS" ]; then
            echo "‚úÖ No draft PRs found."
          fi

          for PR in $PRS; do
            echo "üîπ Processing Draft PR #$PR"

            LAST_COMMIT=$(gh api repos/${{ github.repository }}/pulls/$PR/commits \
              --jq '.[-1].commit.committer.date')

            echo "üïí Last commit timestamp for PR #$PR: $LAST_COMMIT"

            MINUTES=$(( ( $(date +%s) - $(date -d "$LAST_COMMIT" +%s) ) / 60 ))
            echo "‚è≥ PR #$PR: Last commit was $MINUTES minutes ago"

            if [ $MINUTES -ge 30 ]; then
              echo "‚úÖ Marking PR #$PR Ready for Review"
              gh pr ready $PR --repo ${{ github.repository }}
            else
              echo "‚è∏ Skipping PR #$PR (only $MINUTES minutes idle)"
            fi
          done

      #########################################################
      # 2. Auto-Approve Pending Workflow Runs
      #########################################################
      - name: Approve Pending Workflow Runs
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          echo "üîÑ Checking for pending workflow approvals..."
          RUNS=$(gh run list --repo ${{ github.repository }} \
            --json databaseId,status,workflowName \
            --jq '.[] | select(.status=="waiting") | "\(.databaseId) - \(.workflowName)"')

          if [ -z "$RUNS" ]; then
            echo "‚úÖ No workflows awaiting approval."
          else
            echo "üîπ Workflows needing approval: $RUNS"
            for RUN_ID in $(echo "$RUNS" | awk '{print $1}'); do
              echo "‚úÖ Approving workflow run $RUN_ID"
              gh api --method POST repos/${{ github.repository }}/actions/runs/$RUN_ID/approve
            done
          fi

      #########################################################
      # 3. Resolve Merge Conflicts with Copilot
      #########################################################
      - name: Resolve Merge Conflicts with Copilot
        if: github.event_name == 'pull_request'
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          echo "üîç Checking for merge conflicts on PR #${{ github.event.number }}..."
          MERGEABLE=$(gh api repos/${{ github.repository }}/pulls/${{ github.event.number }} \
            --jq '.mergeable')

          echo "üîπ Mergeable status: $MERGEABLE"

          if [ "$MERGEABLE" = "false" ]; then
            echo "‚ö†Ô∏è Conflicts detected! Asking Copilot SWE Agent to resolve..."
            gh pr comment ${{ github.event.number }} \
              --repo ${{ github.repository }} \
              --body "@copilot resolve merge conflicts and push the fixed version."
          else
            echo "‚úÖ No conflicts detected."
          fi

      #########################################################
      # 3.5. Check All Copilot PRs for Conflicts Autonomously
      #########################################################
      - name: Check All Copilot PRs for Conflicts
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          echo "üîç Checking ALL open Copilot PRs for conflicts..."
          
          # Get all open Copilot PRs
          COPILOT_PRS=$(gh api repos/${{ github.repository }}/pulls --jq '.[] | select(.state=="open") | select((.user.login | test("copilot|github-copilot|app/github-copilot|app/copilot-swe-agent|swe-agent")) or (.title | test("copilot|Fix|automated|compatibility"; "i")) or (.head.ref | test("copilot|fix-|automated"; "i"))) | .number')

          if [ -z "$COPILOT_PRS" ]; then
            echo "‚ÑπÔ∏è  No Copilot PRs found"
            exit 0
          fi

          echo "üìã Found Copilot PRs: $(echo "$COPILOT_PRS" | tr '\n' ' ')"

          # Check each PR for conflicts
          for PR_NUMBER in $COPILOT_PRS; do
            echo "üîç Checking PR #$PR_NUMBER..."
            
            MERGEABLE=$(gh api repos/${{ github.repository }}/pulls/$PR_NUMBER --jq '.mergeable')
            MERGE_STATE=$(gh api repos/${{ github.repository }}/pulls/$PR_NUMBER --jq '.mergeable_state')
            
            echo "   Status: mergeable=$MERGEABLE, state=$MERGE_STATE"

            if [ "$MERGEABLE" = "false" ] || [ "$MERGE_STATE" = "dirty" ]; then
              echo "‚ö†Ô∏è  Conflicts detected in PR #$PR_NUMBER!"
              
              # Check for recent conflict resolution requests
              RECENT_REQUESTS=$(gh api repos/${{ github.repository }}/issues/$PR_NUMBER/comments --jq '.[] | select(.created_at > (now - 3600 | todate)) | select(.body | test("resolve merge conflicts"; "i")) | .id')
              
              if [ -z "$RECENT_REQUESTS" ]; then
                echo "ü§ñ Requesting Copilot conflict resolution..."
                gh pr comment $PR_NUMBER --repo ${{ github.repository }} --body "@copilot resolve merge conflicts and push the fixed version. This PR has conflicts detected by autonomous monitoring. Please resolve all conflicts while maintaining RUTOS compatibility and existing functionality."
                
                if [ $? -eq 0 ]; then
                  echo "‚úÖ Conflict resolution requested for PR #$PR_NUMBER"
                else
                  echo "‚ùå Failed to request conflict resolution for PR #$PR_NUMBER"
                fi
              else
                echo "‚ÑπÔ∏è  Conflict resolution already requested recently for PR #$PR_NUMBER"
              fi
            elif [ "$MERGEABLE" = "true" ]; then
              echo "‚úÖ No conflicts in PR #$PR_NUMBER"
            else
              echo "üîÑ PR #$PR_NUMBER status unclear: $MERGEABLE"
            fi
          done

          echo "üèÅ Conflict check completed"

      #########################################################
      # 4. Approve PR (Self-Review)
      #########################################################
      - name: Approve PR on Review Request
        if: github.event.action == 'review_requested' || github.event_name == 'pull_request'
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          echo "‚úÖ Approving PR #${{ github.event.number }}"
          gh pr review ${{ github.event.number }} \
            --repo ${{ github.repository }} --approve

      #########################################################
      # 5. Auto-Merge PR Once Checks Pass
      #########################################################
      - name: Merge PR Automatically
        if: github.event.action == 'review_requested' || github.event_name == 'pull_request'
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          echo "‚úÖ Attempting to merge PR #${{ github.event.number }}"
          gh pr merge ${{ github.event.number }} \
            --repo ${{ github.repository }} --auto --merge
