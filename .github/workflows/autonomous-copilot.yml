name: Autonomous Copilot Manager

on:
  pull_request:
    types:
      - opened
      - reopened
      - ready_for_review
      - review_requested
      - synchronize
  schedule:
    - cron: "*/10 * * * *" # Fallback check every 10 minutes
  workflow_run:
    workflows: ["*"]
    types:
      - requested
      - completed

jobs:
  autonomous-manager:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      actions: write

    steps:
      - name: Install gh CLI (if needed)
        run: sudo apt-get install gh -y

      #########################################################
      # 1. Fallback: Mark Draft PRs Ready if Idle for 30 Minutes
      #########################################################
      - name: Mark Draft PRs Ready (Fallback)
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          echo "üîç Checking draft PRs (API-only)..."
          PRS=$(gh api repos/${{ github.repository }}/pulls \
            --jq '.[] | select(.draft==true) | .number')

          for PR in $PRS; do
            echo "Checking PR #$PR"
            LAST_COMMIT=$(gh api repos/${{ github.repository }}/pulls/$PR/commits \
              --jq '.[-1].commit.committer.date')

            MINUTES=$(( ( $(date +%s) - $(date -d "$LAST_COMMIT" +%s) ) / 60 ))
            echo "‚è≥ Last commit was $MINUTES minutes ago"

            if [ $MINUTES -ge 30 ]; then
              echo "‚úÖ Marking PR #$PR ready for review"
              gh pr ready $PR --repo ${{ github.repository }}
            fi
          done

      #########################################################
      # 2. Auto-Approve Pending Workflow Runs
      #########################################################
      - name: Approve Pending Workflow Runs
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          echo "üîÑ Checking for workflow runs needing approval..."
          RUNS=$(gh run list --repo ${{ github.repository }} \
            --json databaseId,status --jq '.[] | select(.status=="waiting") | .databaseId')

          for RUN_ID in $RUNS; do
            echo "‚úÖ Approving workflow run $RUN_ID"
            gh api --method POST repos/${{ github.repository }}/actions/runs/$RUN_ID/approve
          done

      #########################################################
      # 3. Resolve Merge Conflicts (Trigger Copilot SWE Agent)
      #########################################################
      - name: Resolve Merge Conflicts with Copilot
        if: github.event_name == 'pull_request'
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          echo "üîç Checking for merge conflicts..."
          MERGEABLE=$(gh api repos/${{ github.repository }}/pulls/${{ github.event.number }} \
            --jq '.mergeable')

          if [ "$MERGEABLE" = "false" ]; then
            echo "‚ö†Ô∏è Conflicts detected! Asking Copilot SWE Agent to resolve..."
            gh pr comment ${{ github.event.number }} \
              --repo ${{ github.repository }} \
              --body "@copilot resolve merge conflicts and push the fixed version."
          else
            echo "‚úÖ No conflicts detected."
          fi

      #########################################################
      # 4. Approve PR (Self-Review)
      #########################################################
      - name: Approve PR on Review Request
        if: github.event.action == 'review_requested' || github.event_name == 'pull_request'
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          echo "‚úÖ Approving PR #${{ github.event.number }}"
          gh pr review ${{ github.event.number }} \
            --repo ${{ github.repository }} --approve

      #########################################################
      # 5. Auto-Merge PR Once Checks Pass
      #########################################################
      - name: Merge PR Automatically
        if: github.event.action == 'review_requested' || github.event_name == 'pull_request'
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          echo "‚úÖ Attempting to merge PR #${{ github.event.number }}"
          gh pr merge ${{ github.event.number }} \
            --repo ${{ github.repository }} --auto --merge
