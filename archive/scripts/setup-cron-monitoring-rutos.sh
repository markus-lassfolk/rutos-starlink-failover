#!/bin/sh
# ==============================================================================
# RUTOS Cron Monitor Setup - Easy Setup for Cron Monitoring System
#
# Version: 2.7.1
# Source: https://github.com/markus-lassfolk/rutos-starlink-failover/
#
# This script sets up comprehensive cron monitoring with error detection,
# webhook notifications, and health monitoring.
#
# Usage:
#   # Basic setup:
#   ./scripts/setup-cron-monitoring-rutos.sh
#
#   # With webhook URL:
#   ./scripts/setup-cron-monitoring-rutos.sh --webhook "https://your.webhook.url"
#
#   # Auto-configure existing cron jobs:
#   ./scripts/setup-cron-monitoring-rutos.sh --auto-wrap
# ==============================================================================

set -e

# Version information (auto-updated by update-version.sh)
SCRIPT_VERSION="2.7.1"

# CRITICAL: Load RUTOS library system (REQUIRED)
if ! . "$(dirname "$0")/lib/rutos-lib.sh" 2>/dev/null; then
    # Fallback if library not available
    printf "[ERROR] RUTOS library not found - using minimal fallback\n" >&2
    log_error() { printf "[ERROR] %s\n" "$1" >&2; }
    log_info() { printf "[INFO] %s\n" "$1"; }
    log_debug() { [ "${DEBUG:-0}" = "1" ] && printf "[DEBUG] %s\n" "$1" >&2; }
    log_success() { printf "[SUCCESS] %s\n" "$1"; }
    log_warning() { printf "[WARNING] %s\n" "$1" >&2; }
    safe_execute() { [ "${DRY_RUN:-0}" = "0" ] && eval "$1" || printf "[DRY_RUN] %s\n" "$1" >&2; }
fi

# Initialize script with library features if available
if command -v rutos_init >/dev/null 2>&1; then
    rutos_init "setup-cron-monitoring-rutos.sh" "$SCRIPT_VERSION"
fi

# --- Configuration ---
WEBHOOK_URL=""
AUTO_WRAP="false"
DRY_RUN="${DRY_RUN:-0}"

# Default paths
SCRIPT_DIR="$(dirname "$0")"
WRAPPER_SCRIPT="$SCRIPT_DIR/cron-monitor-wrapper-rutos.sh"
HEALTH_MONITOR_SCRIPT="$SCRIPT_DIR/cron-health-monitor-rutos.sh"
CONFIG_DIR="/etc/starlink-config"
EXPECTED_SCRIPTS_CONFIG="$CONFIG_DIR/cron-expected.conf"

# --- Helper Functions ---

usage() {
    cat <<EOF
RUTOS Cron Monitor Setup

Usage: $0 [OPTIONS]

Options:
    --webhook URL       Set webhook URL for notifications
    --auto-wrap         Automatically wrap existing cron jobs
    --dry-run           Show what would be done without making changes
    --help              Show this help message

Examples:
    # Basic setup
    $0

    # Setup with webhook
    $0 --webhook "https://your-webhook-service.com/alerts"

    # Auto-wrap existing cron jobs
    $0 --auto-wrap

    # Dry run to see what would be changed
    $0 --dry-run --auto-wrap

Features:
    âœ“ Error detection and logging for all cron jobs
    âœ“ Webhook notifications on failures
    âœ“ Pushover integration (if configured)
    âœ“ Rate limiting to prevent notification spam
    âœ“ Timeout protection for hung scripts
    âœ“ Health monitoring for the cron system itself
    âœ“ Comprehensive execution logging

EOF
}

check_prerequisites() {
    log_info "Checking prerequisites..."

    # Check if required scripts exist
    if [ ! -f "$WRAPPER_SCRIPT" ]; then
        log_error "Wrapper script not found: $WRAPPER_SCRIPT"
        log_error "Please ensure the cron monitoring scripts are installed"
        exit 1
    fi

    if [ ! -f "$HEALTH_MONITOR_SCRIPT" ]; then
        log_error "Health monitor script not found: $HEALTH_MONITOR_SCRIPT"
        log_error "Please ensure the cron monitoring scripts are installed"
        exit 1
    fi

    # Make scripts executable
    safe_execute "chmod +x '$WRAPPER_SCRIPT'"
    safe_execute "chmod +x '$HEALTH_MONITOR_SCRIPT'"

    # Create necessary directories
    safe_execute "mkdir -p '$CONFIG_DIR'"
    safe_execute "mkdir -p '/var/log/cron-monitor'"
    safe_execute "mkdir -p '/var/log/cron-health'"
    safe_execute "mkdir -p '/tmp/cron-monitor'"
    safe_execute "mkdir -p '/tmp/cron-health'"

    log_success "Prerequisites check passed"
}

setup_configuration() {
    log_info "Setting up configuration..."

    # Create or update main configuration
    config_file="$CONFIG_DIR/config.sh"

    if [ -f "$config_file" ]; then
        log_info "Updating existing configuration file"

        # Add cron monitoring configuration if not present
        if ! grep -q "CRON_MONITOR_WEBHOOK_URL" "$config_file" 2>/dev/null; then
            {
                echo ""
                echo "# Cron Monitoring Configuration"
                echo "CRON_MONITOR_WEBHOOK_URL=\"${WEBHOOK_URL}\""
                echo "CRON_HEALTH_WEBHOOK_URL=\"${WEBHOOK_URL}\""
                echo "MAX_NOTIFICATIONS_PER_HOUR=\"5\""
                echo "SCRIPT_TIMEOUT=\"300\""
                echo "NOTIFY_ON_SUCCESS=\"0\""
                echo "PUSHOVER_ON_SUCCESS=\"0\""
            } >>"$config_file"
        fi
    else
        log_info "Creating new configuration file"
        cat >"$config_file" <<EOF
#!/bin/sh
# RUTOS Starlink Failover Configuration
# Auto-generated by setup-cron-monitoring-rutos.sh

# Cron Monitoring Configuration
CRON_MONITOR_WEBHOOK_URL="$WEBHOOK_URL"
CRON_HEALTH_WEBHOOK_URL="$WEBHOOK_URL"
MAX_NOTIFICATIONS_PER_HOUR="5"
SCRIPT_TIMEOUT="300"
NOTIFY_ON_SUCCESS="0"
PUSHOVER_ON_SUCCESS="0"

# Add your other configuration variables below:
# PUSHOVER_TOKEN="your_pushover_token"
# PUSHOVER_USER="your_pushover_user"
EOF
    fi

    # Create expected scripts configuration
    if [ ! -f "$EXPECTED_SCRIPTS_CONFIG" ]; then
        log_info "Creating expected scripts configuration"
        cat >"$EXPECTED_SCRIPTS_CONFIG" <<EOF
# Expected Cron Scripts Configuration
# Format: script_name|interval_minutes|description
# This file tells the health monitor which scripts should be running and how often

# Starlink monitoring (every 5 minutes)
starlink_monitor-rutos|5|Starlink quality monitoring

# System maintenance (hourly)
system-maintenance-rutos|60|System maintenance tasks

# Add your monitored scripts below:
# script_name|interval_minutes|description
EOF
    fi

    log_success "Configuration setup completed"
}

setup_health_monitoring() {
    log_info "Setting up health monitoring cron job..."

    # Add health monitoring to crontab (every 15 minutes)
    health_cron_entry="*/15 * * * * $HEALTH_MONITOR_SCRIPT"

    # Get current crontab
    temp_crontab="/tmp/crontab_setup_$$"
    crontab -l >"$temp_crontab" 2>/dev/null || touch "$temp_crontab"

    # Check if health monitoring is already configured
    if grep -q "cron-health-monitor-rutos.sh" "$temp_crontab" 2>/dev/null; then
        log_info "Health monitoring cron job already exists"
    else
        log_info "Adding health monitoring cron job"
        echo "$health_cron_entry" >>"$temp_crontab"

        if [ "$DRY_RUN" = "1" ]; then
            log_info "[DRY_RUN] Would add cron job: $health_cron_entry"
        else
            crontab "$temp_crontab"
            log_success "Health monitoring cron job added"
        fi
    fi

    rm -f "$temp_crontab"
}

wrap_existing_cron_jobs() {
    log_info "Auto-wrapping existing cron jobs..."

    # Get current crontab
    temp_crontab="/tmp/crontab_wrap_$$"
    new_crontab="/tmp/crontab_new_$$"

    if ! crontab -l >"$temp_crontab" 2>/dev/null; then
        log_warning "No existing crontab found"
        return 0
    fi

    wrapped_count=0

    # Process each line
    while IFS= read -r line || [ -n "$line" ]; do
        # Skip empty lines, comments, and already wrapped jobs
        if [ -z "$line" ] || [ "${line#\#}" != "$line" ] || echo "$line" | grep -q "cron-monitor-wrapper-rutos.sh"; then
            echo "$line" >>"$new_crontab"
            continue
        fi

        # Skip health monitor job
        if echo "$line" | grep -q "cron-health-monitor-rutos.sh"; then
            echo "$line" >>"$new_crontab"
            continue
        fi

        # Extract time fields and command
        time_fields="$(echo "$line" | awk '{print $1, $2, $3, $4, $5}')"
        command="$(echo "$line" | cut -d' ' -f6-)"

        # Skip if command is empty
        if [ -z "$command" ]; then
            echo "$line" >>"$new_crontab"
            continue
        fi

        # Wrap the command
        wrapped_command="$WRAPPER_SCRIPT $command"
        wrapped_line="$time_fields $wrapped_command"

        echo "$wrapped_line" >>"$new_crontab"
        wrapped_count=$((wrapped_count + 1))

        log_info "Wrapped: $command"

    done <"$temp_crontab"

    if [ "$wrapped_count" -gt 0 ]; then
        if [ "$DRY_RUN" = "1" ]; then
            log_info "[DRY_RUN] Would wrap $wrapped_count cron jobs"
            log_info "[DRY_RUN] New crontab would be:"
            cat "$new_crontab"
        else
            crontab "$new_crontab"
            log_success "Wrapped $wrapped_count cron jobs with monitoring"
        fi
    else
        log_info "No cron jobs found to wrap"
    fi

    rm -f "$temp_crontab" "$new_crontab"
}

show_usage_examples() {
    cat <<EOF

ðŸŽ¯ CRON MONITORING SETUP COMPLETE!

ðŸ“‹ How to use the cron monitoring system:

1. WRAP INDIVIDUAL SCRIPTS:
   # Before: 
   */5 * * * * /root/my-script.sh

   # After (with monitoring):
   */5 * * * * $WRAPPER_SCRIPT /root/my-script.sh

2. WITH CUSTOM WEBHOOK:
   */5 * * * * WEBHOOK_URL="https://your.webhook.url" $WRAPPER_SCRIPT /root/my-script.sh

3. ENVIRONMENT VARIABLES:
   - DRY_RUN=1: Test mode (no actual execution)
   - DEBUG=1: Enable debug logging
   - NOTIFY_ON_SUCCESS=1: Send notifications on success too
   - SCRIPT_TIMEOUT=600: Custom timeout in seconds

4. CHECK LOGS:
   - Execution logs: /var/log/cron-monitor/
   - Health logs: /var/log/cron-health/
   - Individual script logs: /var/log/cron-monitor/script-name.log

5. CONFIGURE EXPECTED SCRIPTS:
   Edit $EXPECTED_SCRIPTS_CONFIG
   Format: script_name|interval_minutes|description

6. WEBHOOK PAYLOAD FORMAT:
   {
     "timestamp": "2025-07-29 10:30:00",
     "hostname": "router",
     "script": "script-name",
     "exit_code": 1,
     "execution_time": "15",
     "error_output": "Error message...",
     "severity": "error"
   }

ðŸ“Š MONITORING FEATURES:
âœ“ Automatic error detection and logging
âœ“ Webhook notifications on failures
âœ“ Rate limiting (max 5 notifications/hour by default)
âœ“ Timeout protection for hung scripts
âœ“ Health monitoring every 15 minutes
âœ“ Integration with existing Pushover notifications
âœ“ Comprehensive execution logging

ðŸ”§ NEXT STEPS:
1. Configure webhook URL in $CONFIG_DIR/config.sh
2. Add expected scripts to $EXPECTED_SCRIPTS_CONFIG
3. Test with: $WRAPPER_SCRIPT /bin/echo "test"

EOF
}

# --- Argument Parsing ---

while [ $# -gt 0 ]; do
    case "$1" in
        --webhook)
            shift
            WEBHOOK_URL="$1"
            ;;
        --auto-wrap)
            AUTO_WRAP="true"
            ;;
        --dry-run)
            DRY_RUN="1"
            ;;
        --help)
            usage
            exit 0
            ;;
        *)
            log_error "Unknown option: $1"
            usage
            exit 1
            ;;
    esac
    shift
done

# --- Main Execution ---

main() {
    log_info "Setting up RUTOS Cron Monitoring System v$SCRIPT_VERSION"

    if [ "$DRY_RUN" = "1" ]; then
        log_warning "DRY RUN MODE - No changes will be made"
    fi

    # Perform setup steps
    check_prerequisites
    setup_configuration
    setup_health_monitoring

    if [ "$AUTO_WRAP" = "true" ]; then
        wrap_existing_cron_jobs
    fi

    log_success "Cron monitoring setup completed successfully!"

    if [ "$DRY_RUN" != "1" ]; then
        show_usage_examples
    fi
}

# Execute main function
main "$@"
